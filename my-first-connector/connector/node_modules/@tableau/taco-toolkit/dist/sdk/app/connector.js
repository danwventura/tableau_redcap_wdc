"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Connector = void 0;
var toastify_js_1 = __importDefault(require("toastify-js"));
var ajax = __importStar(require("../../shared/app-transport/ajax"));
var auth_credentials_1 = require("../../shared/auth-credentials");
var caller_type_1 = require("../../shared/enums/caller-type");
var log_level_1 = require("../../shared/logger/log-level");
var handler_input_1 = require("../../shared/types/handler-input");
var permission_1 = require("../../shared/types/permission");
var app_logger_1 = require("./app-logger");
var onInitSuccessDefault = function (_connector) {
    // do nothing
};
var onInitFailureDefault = function (_connector, err) {
    console.error(err);
    (0, toastify_js_1.default)({
        text: "".concat(err),
        duration: -1,
        newWindow: true,
        close: true,
        gravity: 'top',
        position: 'right',
        stopOnFocus: true,
        style: {
            color: 'white',
            background: 'red',
        },
    }).showToast();
};
/**
 * The Connector class is a facade class used to talk with the eps main server.
 */
var Connector = /** @class */ (function () {
    function Connector(onInitSuccess, onInitFailure) {
        if (onInitSuccess === void 0) { onInitSuccess = onInitSuccessDefault; }
        if (onInitFailure === void 0) { onInitFailure = onInitFailureDefault; }
        var _this = this;
        this.onInitSuccess = onInitSuccess;
        this.onInitFailure = onInitFailure;
        this.isInsideIframe = false;
        this.isInitialized = false;
        this.permission = { api: {} };
        this.initTimeout = setTimeout(function () {
            if (!_this.isInitialized) {
                _this.onInitFailure(_this, new Error('There was a timeout waiting for the Connector object to initialize.'));
            }
        }, 15000);
        var queryString = window.location.search;
        if (queryString.length === 0) {
            this.isInsideIframe = true;
            window.addEventListener('message', function (event) {
                console.log('event.data.sender', event.data.sender);
                console.log('event.data', event.data);
                // TODO: validate options!
                var connectorInput = event.data;
                _this.initialize(connectorInput);
            });
        }
        else {
            // TODO: the function should type narrow into ConnectorInput
            var connectorInput = urlParamsToObject(queryString);
            this.initialize(connectorInput);
        }
    }
    Connector.prototype.initialize = function (connectorInput) {
        return __awaiter(this, void 0, void 0, function () {
            var serverUrl, connectionData, secrets, epsHeaders, parsedData, permissionResponse, permission;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        validateConnectorInput(connectorInput);
                        this.options = getOptionsFromInput(connectorInput);
                        serverUrl = connectorInput.serverUrl, connectionData = connectorInput.connectionData, secrets = connectorInput.secrets;
                        epsHeaders = getEpsHeaders(this.options);
                        app_logger_1.AppLogger.init({
                            level: log_level_1.LogLevel.INFO,
                            endpoint: "".concat(serverUrl, "/log"),
                            headers: epsHeaders,
                        });
                        if (secrets) {
                            this.secrets = parseSecrets(secrets);
                        }
                        if (connectionData) {
                            parsedData = parseConnectionData(connectionData);
                            if (parsedData) {
                                this.handlerInputs = parsedData.handlerInputs;
                                this.appSnapshot = parsedData.appSnapshot;
                            }
                        }
                        if (!this.isInsideIframe) {
                            openWebSocket(connectorInput);
                        }
                        return [4 /*yield*/, ajax.get("".concat(serverUrl, "/permission"), { headers: epsHeaders })];
                    case 1:
                        permissionResponse = _a.sent();
                        permission = permissionResponse.body;
                        console.log("Got permission from server API: ".concat(JSON.stringify(permission)));
                        this.permission = permission;
                        this.initComplete();
                        return [2 /*return*/];
                }
            });
        });
    };
    Connector.prototype.initComplete = function () {
        clearTimeout(this.initTimeout);
        this.isInitialized = true;
        this.onInitSuccess(this);
    };
    /**
     * Send a GET request.
     *
     * By default, it sends the request directly to the endpoint.
     * When requestOptions.bypassCorsPolicy is set, the request will be forwarded
     * to EPS. This can be used when a server has certain CORS policy. When EPS
     * receives the forwarded request, it will validate the connector's permission
     * settings defined in the connector.json.
     *
     * The function also validates the connector's permission settings on the
     * client.
     */
    Connector.prototype.get = function (url, requestOptions) {
        return __awaiter(this, void 0, void 0, function () {
            var headers, bypassCorsPolicy;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        assertConnectorOptions(this.options);
                        this.validateApiPermission(url, 'GET');
                        headers = requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers;
                        bypassCorsPolicy = requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.bypassCorsPolicy;
                        if (!bypassCorsPolicy) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.forwardRequest(this.options.serverUrl, {
                                method: 'GET',
                                url: url,
                                headers: headers,
                            })];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2: return [4 /*yield*/, ajax.get(url, { headers: headers })];
                    case 3: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Send a POST request.
     *
     * By default, it sends the request directly to the endpoint.
     * When requestOptions.bypassCorsPolicy is set, the request will be forwarded
     * to EPS. This can be used when a server has certain CORS policy. When EPS
     * receives the forwarded request, it will validate the connector's permission
     * settings defined in the connector.json.
     *
     * The function also validates the connector's permission settings on the
     * client.
     */
    Connector.prototype.post = function (url, body, requestOptions) {
        return __awaiter(this, void 0, void 0, function () {
            var headers, bypassCorsPolicy;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        assertConnectorOptions(this.options);
                        this.validateApiPermission(url, 'POST');
                        headers = requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers;
                        bypassCorsPolicy = requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.bypassCorsPolicy;
                        if (!bypassCorsPolicy) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.forwardRequest(this.options.serverUrl, {
                                method: 'POST',
                                url: url,
                                headers: headers,
                                body: body,
                            })];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2: return [4 /*yield*/, ajax.post(url, body, { headers: headers })];
                    case 3: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    Connector.prototype.getIframeMessage = function () {
        assertConnectorOptions(this.options);
        assertHandlerInputs(this.handlerInputs);
        return {
            type: 'eps-submit',
            connectionData: getConnectionData(this.appSnapshot, this.handlerInputs),
            // currently, monolith expects all secret related infos are sent with
            // this property for logging encryption
            secrets: this.secrets,
            headers: getEpsHeaders(this.options),
            submissionUrl: getSubmissionUrl(this.options),
        };
    };
    Connector.prototype.submit = function () {
        return __awaiter(this, void 0, void 0, function () {
            var message, headers, submissionUrl, body;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        assertConnectorOptions(this.options);
                        assertHandlerInputs(this.handlerInputs);
                        app_logger_1.AppLogger.flush();
                        if (!this.isInsideIframe) return [3 /*break*/, 1];
                        message = this.getIframeMessage();
                        window.parent.postMessage(message, '*'); //http://localhost:8080
                        return [3 /*break*/, 3];
                    case 1:
                        headers = getRequestHeaders(this.options, this.secrets);
                        submissionUrl = getSubmissionUrl(this.options);
                        body = getConnectionData(this.appSnapshot, this.handlerInputs);
                        return [4 /*yield*/, ajax.post(submissionUrl, body, { headers: headers })];
                    case 2:
                        _a.sent();
                        closeWindow(this.options.callerType);
                        _a.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    Connector.prototype.validateApiPermission = function (url, method) {
        if (!permission_1.PermissionChecker.checkApiPermission(this.permission.api, url, method)) {
            throw new Error("This app does not have permission to make ".concat(method, " request to ").concat(url));
        }
    };
    Connector.prototype.forwardRequest = function (serverUrl, requestOptions) {
        return __awaiter(this, void 0, void 0, function () {
            var method, headers, url, forwardedRequest, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        assertConnectorOptions(this.options);
                        method = requestOptions.method, headers = requestOptions.headers, url = requestOptions.url;
                        forwardedRequest = {
                            method: method,
                            url: url,
                            headers: headers,
                        };
                        if (forwardedRequest.method === 'POST') {
                            forwardedRequest.body = requestOptions.body;
                        }
                        return [4 /*yield*/, ajax.post(serverUrl, forwardedRequest, {
                                headers: getEpsHeaders(this.options),
                            })
                            // on the eps side, body is a plain object typed as AjaxResponse
                        ];
                    case 1:
                        response = _a.sent();
                        // on the eps side, body is a plain object typed as AjaxResponse
                        return [2 /*return*/, response.body];
                }
            });
        });
    };
    Connector.prototype.cancel = function () {
        assertConnectorOptions(this.options);
        app_logger_1.AppLogger.flush();
        if (this.isInsideIframe) {
            var message = { type: 'cancel' };
            window.parent.postMessage(message, '*'); //http://localhost:8080
        }
        else {
            closeWindow(this.options.callerType);
        }
    };
    Object.defineProperty(Connector.prototype, "oAuthCredentials", {
        get: function () {
            return new auth_credentials_1.OAuthCredentials(this.secrets || {});
        },
        enumerable: false,
        configurable: true
    });
    return Connector;
}());
exports.Connector = Connector;
function openWebSocket(connectorInput) {
    var callerType = connectorInput.callerType, browserWatcherUrl = connectorInput.browserWatcherUrl, connectionId = connectorInput.connectionId;
    if (callerType === caller_type_1.CallerType.appdev) {
        return;
    }
    var browserWatcherSocket = new WebSocket(browserWatcherUrl);
    browserWatcherSocket.onopen = function () {
        console.log('WebSocket Client Connected');
        browserWatcherSocket.send(JSON.stringify({ connectionId: connectionId }));
    };
}
function closeWindow(callerType) {
    if (callerType === caller_type_1.CallerType.appdev) {
        return;
    }
    // This will cause the web socket connection to disconnect and the
    // server will clean up the process, etc.
    window.close();
}
function getOptionsFromInput(input) {
    var connectionId = input.connectionId, serverUrl = input.serverUrl, callerId = input.callerId, epsInstanceId = input.epsInstanceId, connectorClass = input.connectorClass, tacoPath = input.tacoPath, callerType = input.callerType;
    return {
        connectionId: connectionId,
        serverUrl: serverUrl,
        callerId: callerId,
        epsInstanceId: epsInstanceId,
        connectorClass: connectorClass,
        tacoPath: tacoPath,
        callerType: callerType,
    };
}
function assertConnectorOptions(options) {
    if (!options) {
        throw new Error('The connector.options are not initialized.');
    }
}
function assertHandlerInputs(handlerInputs) {
    var e_1, _a;
    if (!Array.isArray(handlerInputs) || handlerInputs.length === 0) {
        throw new Error('Cannot call submit without any handlerInputs.');
    }
    var nameSet = new Set();
    try {
        for (var handlerInputs_1 = __values(handlerInputs), handlerInputs_1_1 = handlerInputs_1.next(); !handlerInputs_1_1.done; handlerInputs_1_1 = handlerInputs_1.next()) {
            var handlerInput = handlerInputs_1_1.value;
            // Validate handler input is of valid shape
            if (!(0, handler_input_1.isValidHandlerInput)(handlerInput)) {
                throw new Error("Handler input is not valid. ".concat(JSON.stringify(handlerInput)));
            }
            // for filebased handler input validate that names are unique
            if ((0, handler_input_1.isFileBasedHandlerInput)(handlerInput)) {
                var name_1 = handlerInput.name;
                if (nameSet.has(name_1)) {
                    throw new Error("Handler input name property value \"".concat(name_1, "\" is not unique."));
                }
                else {
                    nameSet.add(name_1);
                }
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (handlerInputs_1_1 && !handlerInputs_1_1.done && (_a = handlerInputs_1.return)) _a.call(handlerInputs_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
}
function getSubmissionUrl(options) {
    var connectorClass = options.connectorClass, serverUrl = options.serverUrl;
    return "".concat(serverUrl, "/extract/").concat(connectorClass);
}
function getEpsHeaders(options) {
    return {
        'caller-id': options.callerId,
        'connection-id': options.connectionId,
        'eps-instance-id': options.epsInstanceId,
        'plugin-path': options.tacoPath,
        'connector-class': options.connectorClass,
    };
}
function getConnectionData(appSnapshot, handlerInputs) {
    return {
        handlerInputs: handlerInputs,
        appSnapshot: appSnapshot,
    };
}
function parseSecrets(secretsInput) {
    if (!secretsInput || typeof secretsInput !== 'string') {
        console.warn("Invalid input type for secrets: ".concat(typeof secretsInput, ". Skip parsing secrets."));
        return;
    }
    try {
        var secrets = JSON.parse(secretsInput);
        if (Object.keys(secrets).length > 0) {
            return secrets;
        }
    }
    catch (error) {
        console.error('Secrets exist, but could not be parsed.'); // Note: don't log error
    }
}
function parseConnectionData(connectionDataInput) {
    var _a;
    if (typeof connectionDataInput !== 'string' || connectionDataInput.length === 0) {
        console.warn("Invalid input type for connection data: ".concat(typeof connectionDataInput, ". Skip parsing connection data."));
        return;
    }
    try {
        var connectionData = JSON.parse(connectionDataInput);
        var appSnapshot = (_a = connectionData.appSnapshot) !== null && _a !== void 0 ? _a : null;
        var handlerInputs = connectionData.handlerInputs;
        if (!Array.isArray(handlerInputs)) {
            if (handlerInputs !== undefined) {
                console.warn("handlerInputs must be an array, but the found type is ".concat(typeof handlerInputs, ". Ignore the handlerInputs."));
            }
            return {
                handlerInputs: [],
                appSnapshot: appSnapshot,
            };
        }
        return {
            handlerInputs: handlerInputs,
            appSnapshot: appSnapshot,
        };
    }
    catch (error) {
        console.error("Could not parse connectionData: ".concat(error, " with input ").concat(connectionDataInput));
    }
}
// TODO: we should do type narrowing with this function
function validateConnectorInput(input) {
    // Just log for now. Do not throw error.
    var requiredKeys;
    if (caller_type_1.CallerType.vizQLServer === input.callerType) {
        requiredKeys = [
            // Other field are provided to eps requests, outside and after the iframe.
            'callerType',
            'connectionId',
            'secrets',
            'serverUrl',
        ];
    }
    else {
        requiredKeys = [
            'browserWatcherUrl',
            'callerId',
            'connectorClass',
            'connectionId',
            'epsInstanceId',
            'serverUrl',
            'tacoPath',
        ];
    }
    var missingKeys = requiredKeys.filter(function (k) { return input[k] === undefined; });
    if (missingKeys.length > 0) {
        console.error("These keys are missing from connector input: ".concat(missingKeys.join(', ')));
        return false;
    }
    return true;
}
function urlParamsToObject(serializedParams) {
    var entries = new URLSearchParams(serializedParams);
    var result = {};
    entries.forEach(function (value, key) {
        result[key] = value;
    });
    return result;
}
function getRequestHeaders(options, secrets) {
    var headers = getEpsHeaders(options);
    if (secrets) {
        headers.secrets = JSON.stringify(secrets);
    }
    // in case of oAuth monolith will also send access-token and refresh token in the request headers directly,
    // the /extract api will expect oauth access and refresh token in the headers
    var credential = new auth_credentials_1.OAuthCredentials(secrets);
    if (typeof credential.accessToken === 'string') {
        headers['access-token'] = credential.accessToken;
    }
    //TODO (W-14199268): for quickbooks need realm id in secrets, will be removed once we support arbitrary oauth tokens
    if (secrets && typeof secrets.realmid === 'string') {
        headers['realmid'] = secrets.realmid;
    }
    return headers;
}
//# sourceMappingURL=data:application/json;base64,