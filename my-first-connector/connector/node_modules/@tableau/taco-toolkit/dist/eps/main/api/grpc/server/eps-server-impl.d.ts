/// <reference types="node" />
import { EventEmitter } from 'events';
import { ServerUnaryCall, sendUnaryData, UntypedHandleCall } from '@grpc/grpc-js';
import { ExtractRequest, LaunchRequest, AppUrlRequest, AppUrlResponse, ExtractResponse, TerminateExtractorRequest, TerminateExtractorResponse } from '../proto/build/eps_pb';
import { IEpsServer } from '../proto/build/eps_grpc_pb';
import { EpsApiOptions } from '../../../../types/eps-api-options';
import { LaunchHandlerRequest } from '../../eps-handlers/launch';
import { ConnectionData } from '../../../../../shared/types/connection-data';
import { EPSError } from '../../../../types/eps-error';
import { ExtractHandlerRequest } from '../../eps-handlers/extract';
import { ExtractApiResponse } from '../../../../types/extract-api-response';
import { SecretsType } from '../../../../../shared/types/secrets-type';
export declare function toDefaultSize(size: LaunchRequest.Size.AsObject | undefined): import("../../../../types/position-size").PositionSize;
export declare function mapSecretsToObject(secrets: string | undefined, accessToken?: string): SecretsType | undefined;
export declare function mapToExtractResponse(response: ExtractApiResponse | EPSError): ExtractResponse;
export declare function createLaunchHandlerRequest(launchRequest: LaunchRequest.AsObject, apiOptions: EpsApiOptions): LaunchHandlerRequest;
export declare function tryParseToJson(data: string | undefined, name: string): any;
export declare function parseConnectionData(connData: string | undefined): ConnectionData;
export declare function createExtractHandlerRequest(extractRequest: ExtractRequest.AsObject, apiOptions: EpsApiOptions): ExtractHandlerRequest;
export declare class EpsServiceImpl implements IEpsServer {
    private readonly extractorLaunchedEvent;
    private readonly apiOptions;
    [name: string]: UntypedHandleCall | any;
    private readonly extractHandler;
    constructor(extractorLaunchedEvent: EventEmitter, // prettier
    apiOptions: EpsApiOptions);
    launch(call: ServerUnaryCall<LaunchRequest, ExtractResponse>, callback: sendUnaryData<ExtractResponse>): Promise<void>;
    extract(call: ServerUnaryCall<ExtractRequest, ExtractResponse>, callback: sendUnaryData<ExtractResponse>): Promise<void>;
    getAppUrl(call: ServerUnaryCall<AppUrlRequest, AppUrlResponse>, callback: sendUnaryData<AppUrlResponse>): Promise<void>;
    terminateExtractor(call: ServerUnaryCall<TerminateExtractorRequest, TerminateExtractorResponse>, callback: sendUnaryData<TerminateExtractorResponse>): void;
}
