"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.adaptConnectorForLocalization = void 0;
var path_1 = __importDefault(require("path"));
var fs_extra_1 = __importDefault(require("fs-extra"));
var eps_logger_1 = require("../../logging/eps-logger");
// Note:
// -- one alternative is to use packaged parsers(htmlparser2, cheerio, html - parser etc) but we probably wouldn't intend to do extra maintainence or owning for 3PL packages for this use case only
// -- one alternative is to do resource file level actions but seems parcel would build index.html with detailed src for script tag which is not working with Tableau Localize package impl thus leave as a future option
// => utilize regex for now to avoid extra maintainence for 3PL package and this is for now a single line identifier, will add detailed test cases to protect
var languagePattern = /<script id=("|')taco-language("|').*><\/script>/g;
var localePattern = /<script id=("|')taco-locale("|').*><\/script>/g;
var fallbackLanguage = 'en_US';
var fallbackLocale = 'en_US';
var i18nResourceFolder = 'i18n';
// [i18n] LocalizationAdapter to adapt connectors based on monolith user runtime localization context
// TODO: add a way to check allowed language and locale, leave for future impl since for now all passed from the monolith
function adaptConnectorForLocalization(distinctConnectorName, connectorAppPath, language, locale, defaultLanguage, defaultLocale) {
    var indexFilePath = path_1.default.resolve(connectorAppPath, 'index.html');
    if (!fs_extra_1.default.existsSync(indexFilePath)) {
        eps_logger_1.Logger.info("[i18n] connector - ".concat(distinctConnectorName, " has no entry point file provided by '").concat(indexFilePath, "'"));
        return;
    }
    try {
        var content = fs_extra_1.default.readFileSync(indexFilePath).toString();
        if (!content.match(languagePattern)) {
            eps_logger_1.Logger.info("[i18n] connector - ".concat(distinctConnectorName, " is not localized so bypass localiztion adapting"));
            return;
        }
        eps_logger_1.Logger.info("[i18n] adapt ".concat(distinctConnectorName, " at ").concat(connectorAppPath, " - language:").concat(language, ", locale:").concat(locale, ", defaultLanguage:").concat(defaultLanguage, ", defaultLocale:").concat(defaultLocale));
        var runtimeLanguage = getLanguageByCheckingResourceFilePath(language, defaultLanguage, connectorAppPath);
        var runtimeLocale = getLocaleByCheckingResourceFilePath(locale, defaultLocale, connectorAppPath);
        eps_logger_1.Logger.info("[i18n] runtime localization context - language:".concat(runtimeLanguage, ", locale:").concat(runtimeLocale));
        content = adaptConnectorContent(content, runtimeLanguage, runtimeLocale);
        fs_extra_1.default.writeFileSync(indexFilePath, content);
    }
    catch (err) {
        // adapting logic does not break main workflow
        eps_logger_1.Logger.error("[i18n] localization connector adapting error: ".concat(err));
    }
}
exports.adaptConnectorForLocalization = adaptConnectorForLocalization;
// adapt connector content
function adaptConnectorContent(content, language, locale) {
    // ex - initial:
    // original:   <script id="taco-language"></script>
    // overridden: <script id="taco-language" src="./i18n/messages.ja_JP.js"></script>
    // ex - reuse:
    // original:   <script id="taco-language" src="./i18n/messages.ja_JP.js"></script>
    // overridden: <script id="taco-language" src="./i18n/messages.es_ES.js"></script>
    var runtimeLanguageResource = "<script id=\"taco-language\" src=\"./".concat(i18nResourceFolder, "/messages.").concat(language, ".js\"></script>");
    content = content.replace(languagePattern, runtimeLanguageResource);
    var runtimeLocaleResource = "<script id=\"taco-locale\" src=\"./".concat(i18nResourceFolder, "/formatters-and-parsers.").concat(locale, ".js\"></script>");
    content = content.replace(localePattern, runtimeLocaleResource);
    return content;
}
// get language based on validating resource path
function getLanguageByCheckingResourceFilePath(language, defaultLanguage, connectorAppPath) {
    // runtime language -> default startup language -> fallback language
    var languageFilePath = path_1.default.resolve(connectorAppPath, i18nResourceFolder, "messages.".concat(language, ".js"));
    if (fs_extra_1.default.existsSync(languageFilePath)) {
        return language;
    }
    var defaultLanguageFilePath = path_1.default.resolve(connectorAppPath, i18nResourceFolder, "messages.".concat(defaultLanguage, ".js"));
    if (fs_extra_1.default.existsSync(defaultLanguageFilePath)) {
        return defaultLanguage;
    }
    return fallbackLanguage;
}
// get locale based on validating resource path
function getLocaleByCheckingResourceFilePath(locale, defaultLocale, connectorAppPath) {
    var localeFilePath = path_1.default.resolve(connectorAppPath, i18nResourceFolder, "formatters-and-parsers.".concat(locale, ".js"));
    if (fs_extra_1.default.existsSync(localeFilePath)) {
        return locale;
    }
    var defaultLocaleFilePath = path_1.default.resolve(connectorAppPath, i18nResourceFolder, "formatters-and-parsers.".concat(defaultLocale, ".js"));
    if (fs_extra_1.default.existsSync(defaultLocaleFilePath)) {
        return defaultLocale;
    }
    return fallbackLocale;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9jYWxpemF0aW9uLWFkYXB0ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvZXBzL21haW4vY29tcG9uZW50cy9sb2NhbGl6YXRpb24tYWRhcHRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSw4Q0FBdUI7QUFDdkIsc0RBQTBCO0FBQzFCLHVEQUFpRDtBQUVqRCxRQUFRO0FBQ1Isb01BQW9NO0FBQ3BNLHlOQUF5TjtBQUN6Tiw2SkFBNko7QUFDN0osSUFBTSxlQUFlLEdBQUcsa0RBQWtELENBQUE7QUFDMUUsSUFBTSxhQUFhLEdBQUcsZ0RBQWdELENBQUE7QUFFdEUsSUFBTSxnQkFBZ0IsR0FBRyxPQUFPLENBQUE7QUFDaEMsSUFBTSxjQUFjLEdBQUcsT0FBTyxDQUFBO0FBRTlCLElBQU0sa0JBQWtCLEdBQUcsTUFBTSxDQUFBO0FBRWpDLHFHQUFxRztBQUNyRyx5SEFBeUg7QUFDekgsU0FBZ0IsNkJBQTZCLENBQzNDLHFCQUE2QixFQUM3QixnQkFBd0IsRUFDeEIsUUFBZ0IsRUFDaEIsTUFBYyxFQUNkLGVBQXVCLEVBQ3ZCLGFBQXFCO0lBRXJCLElBQU0sYUFBYSxHQUFHLGNBQUksQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLEVBQUUsWUFBWSxDQUFDLENBQUE7SUFDbEUsSUFBSSxDQUFDLGtCQUFHLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxFQUFFO1FBQ2xDLG1CQUFNLENBQUMsSUFBSSxDQUFDLDZCQUFzQixxQkFBcUIsbURBQXlDLGFBQWEsTUFBRyxDQUFDLENBQUE7UUFDakgsT0FBTTtLQUNQO0lBRUQsSUFBSTtRQUNGLElBQUksT0FBTyxHQUFHLGtCQUFHLENBQUMsWUFBWSxDQUFDLGFBQWEsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFBO1FBQ3hELElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLGVBQWUsQ0FBQyxFQUFFO1lBQ25DLG1CQUFNLENBQUMsSUFBSSxDQUFDLDZCQUFz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