"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExtractHandler = void 0;
var extract_1 = require("./extract");
var terminate_extractor_1 = require("./terminate-extractor");
var app_global_1 = __importDefault(require("../../core/app-global"));
/**
 * A class to handle extractors creation and deletion requests on the EPS API layer.
 * It dedups the extractor creation and deletion requests for the same connection-id.
 *
 * It is based on the fact that extactor creation and deletion are always paired in a
 * extractor lifecycle. On the monolith side, a protocol sends a creation request
 * during the init, while it sends a delete request when the protocol is destroyed.
 *
 * Currently, 1 connection-id can have only 1 paired extractor, so when a connection-id
 * is trying to send extractor creation request multi times (triggered by multiple protocol),
 * we want them to share the single extractor instance.
 */
var ExtractHandler = /** @class */ (function () {
    function ExtractHandler() {
        this.connectionStates = new Map();
        this.requestCounts = new Map();
    }
    ExtractHandler.prototype.handleExtractRequest = function (extractorLaunchedEvent, extractHandlerRequest) {
        return __awaiter(this, void 0, void 0, function () {
            var connectionId, connectionState, promise, response, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        connectionId = extractHandlerRequest.connectionId;
                        connectionState = this.connectionStates.get(connectionId);
                        this.addRequestCount(connectionId);
                        if (isConnectedState(connectionState)) {
                            // check connection resource manager to confirm if there's a live extractor for the connection
                            if (app_global_1.default.connectionManager.hasActiveConnection(connectionId)) {
                                return [2 /*return*/, connectionState.response];
                            }
                            // if no active connection, the cached the result is stale. Remove and continue.
                            this.removeConnection(connectionId);
                        }
                        else if (isConnectingState(connectionState)) {
                            return [2 /*return*/, connectionState.promise];
                        }
                        promise = (0, extract_1.handleExtract)(extractorLaunchedEvent, extractHandlerRequest);
                        this.connectionStates.set(connectionId, {
                            status: 'connecting',
                            promise: promise,
                        });
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, promise];
                    case 2:
                        response = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        e_1 = _a.sent();
                        // when error, clean up the cached state, and re-throw to let the caller handle
                        this.removeConnection(connectionId);
                        throw e_1;
                    case 4:
                        this.connectionStates.set(connectionId, {
                            status: 'connected',
                            response: response,
                        });
                        return [2 /*return*/, response];
                }
            });
        });
    };
    ExtractHandler.prototype.handleTerminationRequest = function (terminationRequest) {
        var connectionId = terminationRequest.connectionId;
        this.reduceRequestCount(connectionId);
        if (this.isDeletableConnection(connectionId)) {
            var response = (0, terminate_extractor_1.handleTerminateExractor)(terminationRequest);
            // after termination if there is no active connection anymoreï¼Œ
            // clean up the cached state from extractHandler
            if (!app_global_1.default.connectionManager.hasActiveConnection(connectionId)) {
                this.removeConnection(connectionId);
            }
            return response;
        }
        return {
            freedExtractorIds: [],
        };
    };
    ExtractHandler.prototype.getConnectionCount = function () {
        return Object.keys(this.connectionStates).length;
    };
    ExtractHandler.prototype.removeConnection = function (connectionId) {
        if (this.connectionStates.has(connectionId)) {
            this.connectionStates.delete(connectionId);
        }
    };
    ExtractHandler.prototype.addRequestCount = function (connectionId) {
        var count = this.requestCounts.get(connectionId);
        if (count === undefined) {
            this.requestCounts.set(connectionId, 1);
        }
        else {
            this.requestCounts.set(connectionId, count + 1);
        }
    };
    ExtractHandler.prototype.reduceRequestCount = function (connectionId) {
        var count = this.requestCounts.get(connectionId);
        if (count === undefined) {
            return;
        }
        var newValue = count - 1;
        if (newValue <= 0) {
            this.requestCounts.delete(connectionId);
        }
        else {
            this.requestCounts.set(connectionId, newValue);
        }
    };
    ExtractHandler.prototype.isDeletableConnection = function (connectionId) {
        var count = this.requestCounts.get(connectionId);
        return count === undefined || count < 1;
    };
    return ExtractHandler;
}());
exports.ExtractHandler = ExtractHandler;
function isConnectedState(state) {
    return state !== undefined && state.status === 'connected';
}
function isConnectingState(state) {
    return state !== undefined && state.status === 'connecting';
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXh0cmFjdC1oYW5kbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2Vwcy9tYWluL2FwaS9lcHMtaGFuZGxlcnMvZXh0cmFjdC1oYW5kbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUNBLHFDQUFpRjtBQUNqRiw2REFJOEI7QUFDOUIscUVBQTZDO0FBYzdDOzs7Ozs7Ozs7OztHQVdHO0FBQ0g7SUFBQTtRQUNVLHFCQUFnQixHQUFHLElBQUksR0FBRyxFQUEyQixDQUFBO1FBQ3JELGtCQUFhLEdBQUcsSUFBSSxHQUFHLEVBQWtCLENBQUE7SUF1R25ELENBQUM7SUFyR08sNkNBQW9CLEdBQTFCLFVBQ0Usc0JBQW9DLEVBQ3BDLHFCQUE0Qzs7Ozs7O3dCQUVwQyxZQUFZLEdBQUsscUJBQXFCLGFBQTFCLENBQTBCO3dCQUN4QyxlQUFlLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQTt3QkFFL0QsSUFBSSxDQUFDLGVBQWUsQ0FBQyxZQUFZLENBQUMsQ0FBQTt3QkFFbEMsSUFBSSxnQkFBZ0IsQ0FBQyxlQUFlLENBQUMsRUFBRTs0QkFDckMsOEZBQThGOzRCQUM5RixJQUFJLG9CQUFTLENBQUMsaUJBQWlCLENBQUMsbUJBQW1CLENBQUMsWUFBWSxDQUFDLEVBQUU7Z0NBQ2pFLHNCQUFPLGVBQWUsQ0FBQyxRQUFRLEVBQUE7NkJBQ2hDOzRCQUVELGdGQUFnRjs0QkFDaEYsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFlBQVksQ0FBQyxDQUFBO3lCQUNwQzs2QkFBTSxJQUFJLGlCQUFpQixDQUFDLGVBQWUsQ0FBQyxFQUFFOzRCQUM3QyxzQkFBTyxlQUFlLENBQUMsT0FBTyxFQUFBO3lCQUMvQjt3QkFFSyxPQUFPLEdBQUcsSUFBQSx1QkFBYSxFQUFDLHNCQUFzQixFQUFFLHFCQUFxQixDQUFD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