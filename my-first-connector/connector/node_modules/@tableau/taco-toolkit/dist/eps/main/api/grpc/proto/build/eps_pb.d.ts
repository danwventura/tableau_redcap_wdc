// package: tableau.eps.v1
// file: eps.proto

/* tslint:disable */
/* eslint-disable */

import * as jspb from 'google-protobuf'

export class LaunchRequest extends jspb.Message {
  getConnectorClass(): string
  setConnectorClass(value: string): LaunchRequest
  getCallerId(): string
  setCallerId(value: string): LaunchRequest
  getEpsInstanceId(): string
  setEpsInstanceId(value: string): LaunchRequest
  getConnectionId(): string
  setConnectionId(value: string): LaunchRequest
  getPluginPath(): string
  setPluginPath(value: string): LaunchRequest
  getDebug(): string
  setDebug(value: string): LaunchRequest

  hasSize(): boolean
  clearSize(): void
  getSize(): LaunchRequest.Size | undefined
  setSize(value?: LaunchRequest.Size): LaunchRequest
  getExtractorMode(): string
  setExtractorMode(value: string): LaunchRequest
  getConnectionData(): string
  setConnectionData(value: string): LaunchRequest
  getSecrets(): string
  setSecrets(value: string): LaunchRequest

  hasLanguage(): boolean
  clearLanguage(): void
  getLanguage(): string | undefined
  setLanguage(value: string): LaunchRequest

  hasLocale(): boolean
  clearLocale(): void
  getLocale(): string | undefined
  setLocale(value: string): LaunchRequest

  hasAccessToken(): boolean
  clearAccessToken(): void
  getAccessToken(): string | undefined
  setAccessToken(value: string): LaunchRequest

  hasRefreshToken(): boolean
  clearRefreshToken(): void
  getRefreshToken(): string | undefined
  setRefreshToken(value: string): LaunchRequest

  serializeBinary(): Uint8Array
  toObject(includeInstance?: boolean): LaunchRequest.AsObject
  static toObject(includeInstance: boolean, msg: LaunchRequest): LaunchRequest.AsObject
  static extensions: { [key: number]: jspb.ExtensionFieldInfo<jspb.Message> }
  static extensionsBinary: { [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message> }
  static serializeBinaryToWriter(message: LaunchRequest, writer: jspb.BinaryWriter): void
  static deserializeBinary(bytes: Uint8Array): LaunchRequest
  static deserializeBinaryFromReader(message: LaunchRequest, reader: jspb.BinaryReader): LaunchRequest
}

export namespace LaunchRequest {
  export type AsObject = {
    connectorClass: string
    callerId: string
    epsInstanceId: string
    connectionId: string
    pluginPath: string
    debug: string
    size?: LaunchRequest.Size.AsObject
    extractorMode: string
    connectionData: string
    secrets: string
    language?: string
    locale?: string
    accessToken?: string
    refreshToken?: string
  }

  export class Size extends jspb.Message {
    getWidth(): number
    setWidth(value: number): Size
    getLeft(): number
    setLeft(value: number): Size
    getTop(): number
    setTop(value: number): Size
    getHeight(): number
    setHeight(value: number): Size

    serializeBinary(): Uint8Array
    toObject(includeInstance?: boolean): Size.AsObject
    static toObject(includeInstance: boolean, msg: Size): Size.AsObject
    static extensions: { [key: number]: jspb.ExtensionFieldInfo<jspb.Message> }
    static extensionsBinary: { [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message> }
    static serializeBinaryToWriter(message: Size, writer: jspb.BinaryWriter): void
    static deserializeBinary(bytes: Uint8Array): Size
    static deserializeBinaryFromReader(message: Size, reader: jspb.BinaryReader): Size
  }

  export namespace Size {
    export type AsObject = {
      width: number
      left: number
      top: number
      height: number
    }
  }
}

export class ExtractRequest extends jspb.Message {
  getConnectorClass(): string
  setConnectorClass(value: string): ExtractRequest
  getCallerId(): string
  setCallerId(value: string): ExtractRequest
  getEpsInstanceId(): string
  setEpsInstanceId(value: string): ExtractRequest
  getConnectionId(): string
  setConnectionId(value: string): ExtractRequest
  getPluginPath(): string
  setPluginPath(value: string): ExtractRequest
  getDebug(): string
  setDebug(value: string): ExtractRequest
  getConnectionData(): string
  setConnectionData(value: string): ExtractRequest
  getSecrets(): string
  setSecrets(value: string): ExtractRequest

  hasLanguage(): boolean
  clearLanguage(): void
  getLanguage(): string | undefined
  setLanguage(value: string): ExtractRequest

  hasLocale(): boolean
  clearLocale(): void
  getLocale(): string | undefined
  setLocale(value: string): ExtractRequest

  hasAccessToken(): boolean
  clearAccessToken(): void
  getAccessToken(): string | undefined
  setAccessToken(value: string): ExtractRequest

  hasRefreshToken(): boolean
  clearRefreshToken(): void
  getRefreshToken(): string | undefined
  setRefreshToken(value: string): ExtractRequest

  serializeBinary(): Uint8Array
  toObject(includeInstance?: boolean): ExtractRequest.AsObject
  static toObject(includeInstance: boolean, msg: ExtractRequest): ExtractRequest.AsObject
  static extensions: { [key: number]: jspb.ExtensionFieldInfo<jspb.Message> }
  static extensionsBinary: { [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message> }
  static serializeBinaryToWriter(message: ExtractRequest, writer: jspb.BinaryWriter): void
  static deserializeBinary(bytes: Uint8Array): ExtractRequest
  static deserializeBinaryFromReader(message: ExtractRequest, reader: jspb.BinaryReader): ExtractRequest
}

export namespace ExtractRequest {
  export type AsObject = {
    connectorClass: string
    callerId: string
    epsInstanceId: string
    connectionId: string
    pluginPath: string
    debug: string
    connectionData: string
    secrets: string
    language?: string
    locale?: string
    accessToken?: string
    refreshToken?: string
  }
}

export class ExtractResponse extends jspb.Message {
  getStatus(): string
  setStatus(value: string): ExtractResponse

  hasPort(): boolean
  clearPort(): void
  getPort(): number | undefined
  setPort(value: number): ExtractResponse

  hasExtractorId(): boolean
  clearExtractorId(): void
  getExtractorId(): string | undefined
  setExtractorId(value: string): ExtractResponse

  hasExtractorType(): boolean
  clearExtractorType(): void
  getExtractorType(): string | undefined
  setExtractorType(value: string): ExtractResponse
  getConnectionData(): string
  setConnectionData(value: string): ExtractResponse
  getSecrets(): string
  setSecrets(value: string): ExtractResponse

  hasErrorMsg(): boolean
  clearErrorMsg(): void
  getErrorMsg(): string | undefined
  setErrorMsg(value: string): ExtractResponse

  hasTableauError(): boolean
  clearTableauError(): void
  getTableauError(): string | undefined
  setTableauError(value: string): ExtractResponse

  hasConnectorName(): boolean
  clearConnectorName(): void
  getConnectorName(): string | undefined
  setConnectorName(value: string): ExtractResponse

  serializeBinary(): Uint8Array
  toObject(includeInstance?: boolean): ExtractResponse.AsObject
  static toObject(includeInstance: boolean, msg: ExtractResponse): ExtractResponse.AsObject
  static extensions: { [key: number]: jspb.ExtensionFieldInfo<jspb.Message> }
  static extensionsBinary: { [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message> }
  static serializeBinaryToWriter(message: ExtractResponse, writer: jspb.BinaryWriter): void
  static deserializeBinary(bytes: Uint8Array): ExtractResponse
  static deserializeBinaryFromReader(message: ExtractResponse, reader: jspb.BinaryReader): ExtractResponse
}

export namespace ExtractResponse {
  export type AsObject = {
    status: string
    port?: number
    extractorId?: string
    extractorType?: string
    connectionData: string
    secrets: string
    errorMsg?: string
    tableauError?: string
    connectorName?: string
  }
}

export class AppUrlRequest extends jspb.Message {
  getConnectorClass(): string
  setConnectorClass(value: string): AppUrlRequest
  getConnectionId(): string
  setConnectionId(value: string): AppUrlRequest
  getCallerType(): string
  setCallerType(value: string): AppUrlRequest
  getPluginPath(): string
  setPluginPath(value: string): AppUrlRequest

  hasLanguage(): boolean
  clearLanguage(): void
  getLanguage(): string | undefined
  setLanguage(value: string): AppUrlRequest

  hasLocale(): boolean
  clearLocale(): void
  getLocale(): string | undefined
  setLocale(value: string): AppUrlRequest

  serializeBinary(): Uint8Array
  toObject(includeInstance?: boolean): AppUrlRequest.AsObject
  static toObject(includeInstance: boolean, msg: AppUrlRequest): AppUrlRequest.AsObject
  static extensions: { [key: number]: jspb.ExtensionFieldInfo<jspb.Message> }
  static extensionsBinary: { [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message> }
  static serializeBinaryToWriter(message: AppUrlRequest, writer: jspb.BinaryWriter): void
  static deserializeBinary(bytes: Uint8Array): AppUrlRequest
  static deserializeBinaryFromReader(message: AppUrlRequest, reader: jspb.BinaryReader): AppUrlRequest
}

export namespace AppUrlRequest {
  export type AsObject = {
    connectorClass: string
    connectionId: string
    callerType: string
    pluginPath: string
    language?: string
    locale?: string
  }
}

export class AppUrlResponse extends jspb.Message {
  getConnectorAppUrl(): string
  setConnectorAppUrl(value: string): AppUrlResponse

  serializeBinary(): Uint8Array
  toObject(includeInstance?: boolean): AppUrlResponse.AsObject
  static toObject(includeInstance: boolean, msg: AppUrlResponse): AppUrlResponse.AsObject
  static extensions: { [key: number]: jspb.ExtensionFieldInfo<jspb.Message> }
  static extensionsBinary: { [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message> }
  static serializeBinaryToWriter(message: AppUrlResponse, writer: jspb.BinaryWriter): void
  static deserializeBinary(bytes: Uint8Array): AppUrlResponse
  static deserializeBinaryFromReader(message: AppUrlResponse, reader: jspb.BinaryReader): AppUrlResponse
}

export namespace AppUrlResponse {
  export type AsObject = {
    connectorAppUrl: string
  }
}

export class TerminateExtractorRequest extends jspb.Message {
  getConnectionId(): string
  setConnectionId(value: string): TerminateExtractorRequest
  clearExtractorIdList(): void
  getExtractorIdList(): Array<string>
  setExtractorIdList(value: Array<string>): TerminateExtractorRequest
  addExtractorId(value: string, index?: number): string

  serializeBinary(): Uint8Array
  toObject(includeInstance?: boolean): TerminateExtractorRequest.AsObject
  static toObject(includeInstance: boolean, msg: TerminateExtractorRequest): TerminateExtractorRequest.AsObject
  static extensions: { [key: number]: jspb.ExtensionFieldInfo<jspb.Message> }
  static extensionsBinary: { [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message> }
  static serializeBinaryToWriter(message: TerminateExtractorRequest, writer: jspb.BinaryWriter): void
  static deserializeBinary(bytes: Uint8Array): TerminateExtractorRequest
  static deserializeBinaryFromReader(
    message: TerminateExtractorRequest,
    reader: jspb.BinaryReader
  ): TerminateExtractorRequest
}

export namespace TerminateExtractorRequest {
  export type AsObject = {
    connectionId: string
    extractorIdList: Array<string>
  }
}

export class TerminateExtractorResponse extends jspb.Message {
  clearExtractorIdList(): void
  getExtractorIdList(): Array<string>
  setExtractorIdList(value: Array<string>): TerminateExtractorResponse
  addExtractorId(value: string, index?: number): string

  serializeBinary(): Uint8Array
  toObject(includeInstance?: boolean): TerminateExtractorResponse.AsObject
  static toObject(includeInstance: boolean, msg: TerminateExtractorResponse): TerminateExtractorResponse.AsObject
  static extensions: { [key: number]: jspb.ExtensionFieldInfo<jspb.Message> }
  static extensionsBinary: { [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message> }
  static serializeBinaryToWriter(message: TerminateExtractorResponse, writer: jspb.BinaryWriter): void
  static deserializeBinary(bytes: Uint8Array): TerminateExtractorResponse
  static deserializeBinaryFromReader(
    message: TerminateExtractorResponse,
    reader: jspb.BinaryReader
  ): TerminateExtractorResponse
}

export namespace TerminateExtractorResponse {
  export type AsObject = {
    extractorIdList: Array<string>
  }
}
