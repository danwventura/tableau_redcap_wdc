"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAppLogOption = exports.parseFeatureFlags = exports.parseStaticServerPort = exports.parseMainPort = exports.parsePortRange = exports.parseArgs = exports.handleLoggerSetup = void 0;
var commander_1 = require("commander");
var node_os_1 = __importDefault(require("node:os"));
var node_path_1 = __importDefault(require("node:path"));
var uuid_1 = require("uuid");
var caller_type_1 = require("../../../../shared/enums/caller-type");
var error_codes_1 = require("../../../../shared/errors/error-codes");
var error_source_1 = require("../../../../shared/errors/error-source");
var status_code_1 = require("../../../../shared/errors/status-code");
var log_level_1 = require("../../../../shared/logger/log-level");
var eps_logger_1 = require("../../../logging/eps-logger");
var EPS_INSTANCE_ID = (0, uuid_1.v4)();
var epsTempDirRoot = node_path_1.default.join(node_os_1.default.tmpdir(), 'tableau-eps-temp');
var epsTempDir = node_path_1.default.join(epsTempDirRoot, EPS_INSTANCE_ID);
// TODO: the default folder should not have Tableau dependency...
// verify there's nothing replying on this, and point to cwd/log
var DEFAULT_LOG_DIR = node_path_1.default.join(node_os_1.default.homedir(), 'Documents', 'My Tableau Repository', 'Logs');
var DEFAULT_LOG_LEVEL = log_level_1.LogLevel.DEBUG;
var DEFAULT_STATIC_SERVER_UI_DIR = node_path_1.default.join(epsTempDir, 'static-server', 'app');
var DEFAULT_STATIC_SERVER_HANDLERS_DIR = node_path_1.default.join(epsTempDir, 'static-server', 'handlers');
var DEFAULT_LANGUAGE = 'en_US';
var DEFAULT_LOCALE = 'en_US';
/**
 * A command line value for log level option to disable a log writer.
 * Note: it should be only used in the command line layer.
 */
var LOG_OFF_LEVEL = 'off';
var logLevelChoices = __spreadArray(__spreadArray([], __read(log_level_1.logLevelValues), false), [LOG_OFF_LEVEL], false);
function handleLoggerSetup(args) {
    var program = new commander_1.Command();
    // throw for error cases, so that it can log errors and fall back
    addLoggerOptions(program).allowUnknownOption().exitOverride();
    try {
        program.parse(args);
    }
    catch (error) {
        // if logger configs are incorrect, init logger with fallback settings
        eps_logger_1.Logger.init(EPS_INSTANCE_ID, {
            filename: eps_logger_1.EPS_LOG_FILE_NAME,
            fileLogDirPath: DEFAULT_LOG_DIR,
            fileLogLevel: log_level_1.LogLevel.INFO,
            sourceName: 'EPS',
            consoleLogLevel: log_level_1.LogLevel.WARNING,
        });
        eps_logger_1.Logger.error("Invalid logging options: ".concat(error, "."));
        eps_logger_1.Logger.warn('Initializing logger with fallback settings.');
        return;
    }
    var _a = program.opts(), logDir = _a.logDir, logLevel = _a.logLevel, consoleLogLevel = _a.consoleLogLevel;
    var appLogOption = getAppLogOption({ logDir: logDir, logLevel: logLevel, consoleLogLevel: consoleLogLevel });
    var loggerConfig = (0, eps_logger_1.createLoggerConfig)('EPS', appLogOption);
    eps_logger_1.Logger.init(EPS_INSTANCE_ID, loggerConfig);
}
exports.handleLoggerSetup = handleLoggerSetup;
function addLoggerOptions(program) {
    return program
        .option('--log-dir <log_dir>', 'Log Directory', DEFAULT_LOG_DIR)
        .addOption(new commander_1.Option('--log-level <log_level>', "Log level for file-based logs. Choices: ".concat(logLevelChoices))
        .argParser(parseLogLevel)
        .default(DEFAULT_LOG_LEVEL))
        .addOption(new commander_1.Option('--console-log-level <log_level>', "Log level for console logs. Choices: ".concat(logLevelChoices))
        .argParser(parseLogLevel)
        .default(LOG_OFF_LEVEL));
}
function parseLogLevel(value) {
    var lowerCaseValue = value.toLowerCase();
    if (!logLevelChoices.includes(lowerCaseValue)) {
        throw new commander_1.InvalidArgumentError("Allowed choices are: ".concat(logLevelChoices));
    }
    return lowerCaseValue;
}
function parseArgs(args) {
    var program = new commander_1.Command();
    addLoggerOptions(program)
        .requiredOption('--caller-pid <caller_pid>', 'Caller Process Id', parsePid)
        .requiredOption('--caller-id <caller_id>', 'Caller Id')
        .requiredOption('--port-file <port_file>', 'Port file path')
        .addOption(new commander_1.Option('--caller-type <caller_type>', 'Valid values: desktop, prep, vizqlserver, etc.')
        .choices(Object.values(caller_type_1.CallerType))
        .default(caller_type_1.CallerType.desktop))
        .option('--feature-flags <feature_flags>', 'EPS feature flags as defined in monolith')
        .option('--port-range <port_range>', 'Port range for all EPS services. Format: start-end', parsePortRange, [9089, 9999])
        .option('--static-server-ui-dir <log_dir>', 'Connector app root directory', DEFAULT_STATIC_SERVER_UI_DIR)
        .option('--static-server-handlers-dir <log_dir>', 'Connector handlers root directory', DEFAULT_STATIC_SERVER_HANDLERS_DIR)
        .option('--static-server-port <port>', 'Static Server port to use, for vizqlserver only')
        .option('--main-port <port>', 'Main API port to use, for vizqlserver only')
        .option('--grpc-server-port <port>', 'grpc Server port to use', parsePort)
        .option('--language <language>', 'Runtime user choice for language', DEFAULT_LANGUAGE)
        .option('--locale <locale>', 'Runtime user choice for locale', DEFAULT_LOCALE)
        .option('--eps-temp-dir-path <dir_path>', 'Root for temporary file storage', epsTempDirRoot)
        .addHelpCommand()
        .allowUnknownOption()
        .configureOutput({
        writeOut: function (str) { return eps_logger_1.Logger.info("".concat(str)); },
        writeErr: function (str) {
            return eps_logger_1.Logger.logEPSError(status_code_1.StatusCode.InvalidArgument, error_source_1.ErrorSources.Content, error_codes_1.ErrorCodes.ORP420NN, "Error with command line options. ".concat(str));
        },
    });
    program.parse(args);
    var options = program.opts();
    eps_logger_1.Logger.debug("Command arguments: ".concat(JSON.stringify(options, undefined, 2)));
    return __assign(__assign({}, options), { 
        // addtional parsing for certain properties
        mainPort: parseMainPort(options), staticServerPort: parseStaticServerPort(options), featureFlags: parseFeatureFlags(options.featureFlags), epsInstanceId: EPS_INSTANCE_ID });
}
exports.parseArgs = parseArgs;
function parsePortRange(portRange) {
    var parts = portRange.split('-');
    if (parts.length !== 2) {
        throw new commander_1.InvalidArgumentError("Port range must be formatted in 'start-end'");
    }
    var start = parseInt(parts[0], 10);
    var end = parseInt(parts[1], 10);
    if (!isValidPort(start) || !isValidPort(end)) {
        throw new commander_1.InvalidArgumentError("Invalid port number in the port range: ".concat(portRange));
    }
    if (end - start < 5) {
        throw new commander_1.InvalidArgumentError('EPS requires at least 5 ports');
    }
    return [start, end];
}
exports.parsePortRange = parsePortRange;
function parsePort(portString) {
    var port = parseInt(portString, 10);
    if (!isValidPort(port)) {
        throw new commander_1.InvalidArgumentError("Invalid port number: ".concat(portString));
    }
    return port;
}
function isValidPort(port) {
    return Number.isInteger(port) && port > 0 && port <= 65535;
}
function parsePid(pidString) {
    var pid = parseInt(pidString, 10);
    if (isNaN(pid) || pid < 0) {
        throw new commander_1.InvalidArgumentError("Invalid pid number: ".concat(pidString));
    }
    return pid;
}
function parseMainPort(options) {
    var callerType = options.callerType, mainPort = options.mainPort;
    if (mainPort === undefined) {
        if (callerType === caller_type_1.CallerType.vizQLServer || callerType === caller_type_1.CallerType.dcf) {
            throw new Error("--main-port must be provided when --caller-type is ".concat(callerType, "."));
        }
        return;
    }
    if (callerType !== caller_type_1.CallerType.vizQLServer && callerType !== caller_type_1.CallerType.dcf) {
        throw new Error("--main-port can be only used when --caller-type is ".concat(caller_type_1.CallerType.vizQLServer, " or ").concat(caller_type_1.CallerType.dcf, ". The current caller type is '").concat(callerType, "'."));
    }
    return parsePort(mainPort);
}
exports.parseMainPort = parseMainPort;
function parseStaticServerPort(options) {
    var callerType = options.callerType, staticServerPort = options.staticServerPort;
    if (staticServerPort === undefined) {
        if (callerType === caller_type_1.CallerType.vizQLServer) {
            throw new Error("--static-server-port must be provided when --caller-type is ".concat(callerType, "."));
        }
        return;
    }
    if (callerType !== caller_type_1.CallerType.vizQLServer) {
        throw new Error("--static-server-port can be only used when --caller-type is ".concat(caller_type_1.CallerType.vizQLServer, ". The current caller type is '").concat(callerType, "'."));
    }
    return parsePort(staticServerPort);
}
exports.parseStaticServerPort = parseStaticServerPort;
/**
 * The configuration for feature flags from monolith.
 * This config does not include all feature flags passed from monolith,
 * but only the flags that EPS needs to handle.
 */
var FEATURE_FLAGS_CONFIG = {
    EPSSupportgRPC: {
        falseValue: 'off',
        defaultValue: true,
    },
};
function parseFeatureFlags(input) {
    var e_1, _a;
    var flagsString = input !== null && input !== void 0 ? input : '';
    var args = flagsString
        .split(',')
        .filter(Boolean)
        .map(function (arg) {
        var _a = __read(arg.split(':'), 2), key = _a[0], value = _a[1];
        return [key.trim(), value === null || value === void 0 ? void 0 : value.trim()];
    });
    var flags = Object.fromEntries(args);
    var result = {};
    try {
        for (var _b = __values(Object.entries(FEATURE_FLAGS_CONFIG)), _c = _b.next(); !_c.done; _c = _b.next()) {
            var _d = __read(_c.value, 2), key = _d[0], config = _d[1];
            var flagName = key;
            var defaultValue = config.defaultValue, falseValue = config.falseValue;
            var value = flags[flagName];
            if (value === falseValue) {
                result[flagName] = false;
            }
            else {
                result[flagName] = defaultValue;
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return result;
}
exports.parseFeatureFlags = parseFeatureFlags;
/**
 * Get app log options from command line values
 */
function getAppLogOption(options) {
    var logLevel = options.logLevel, consoleLogLevel = options.consoleLogLevel, logDir = options.logDir;
    if (logLevel === LOG_OFF_LEVEL) {
        return {
            // if file-based log has been explicitly disabled, force to enable console log
            consoleLogLevel: consoleLogLevel === LOG_OFF_LEVEL ? log_level_1.LogLevel.INFO : consoleLogLevel,
            logDir: undefined,
            logLevel: undefined,
        };
    }
    var logOption = {
        logDir: logDir,
        logLevel: logLevel,
        consoleLogLevel: consoleLogLevel === LOG_OFF_LEVEL ? undefined : consoleLogLevel,
    };
    return logOption;
}
exports.getAppLogOption = getAppLogOption;
//# sourceMappingURL=data:application/json;base64,