"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EpsServiceImpl = exports.createExtractHandlerRequest = exports.parseConnectionData = exports.tryParseToJson = exports.createLaunchHandlerRequest = exports.mapToExtractResponse = exports.mapSecretsToObject = exports.toDefaultSize = void 0;
var eps_pb_1 = require("../proto/build/eps_pb");
var app_url_1 = require("../../eps-handlers/app-url");
var launch_1 = require("../../eps-handlers/launch");
var position_size_1 = require("../../../../types/position-size");
var eps_error_1 = require("../../../../types/eps-error");
var eps_logger_1 = require("../../../../logging/eps-logger");
var handler_utils_1 = require("../../eps-handlers/handler-utils");
var extract_handler_1 = require("../../eps-handlers/extract-handler");
function toDefaultSize(size) {
    if (!size) {
        return (0, position_size_1.parsePositionSize)({});
    }
    return (0, position_size_1.parsePositionSize)({ top: size.top, left: size.left, width: size.width, height: size.height });
}
exports.toDefaultSize = toDefaultSize;
function mapSecretsToObject(secrets, accessToken) {
    //if auth type is oAuth then access token will be used
    if (accessToken) {
        return {
            'access-token': accessToken,
        };
    }
    if (secrets) {
        return tryParseToJson(secrets, 'Secrets');
    }
    return undefined;
}
exports.mapSecretsToObject = mapSecretsToObject;
function mapToExtractResponse(response) {
    var resp = new eps_pb_1.ExtractResponse();
    if (response instanceof eps_error_1.EPSError) {
        var message = response.message, epsErrorInfo = response.epsErrorInfo, connectorName = response.connectorName, status_1 = response.status;
        resp.setStatus(status_1);
        resp.setErrorMsg(message);
        resp.setTableauError(epsErrorInfo.tableauError);
        if (connectorName) {
            resp.setConnectorName(connectorName);
        }
    }
    else {
        var _a = response, status_2 = _a.status, extractorType = _a.extractorType, connectionData = _a.connectionData, secrets = _a.secrets, port = _a.port, extractorId = _a.extractorId, connectorName = _a.connectorName;
        resp.setStatus(status_2);
        if (port) {
            resp.setPort(port);
        }
        if (extractorId) {
            resp.setExtractorId(extractorId);
        }
        if (extractorType) {
            resp.setExtractorType(extractorType);
        }
        if (connectorName) {
            resp.setConnectorName(connectorName);
        }
        if (secrets) {
            resp.setSecrets(JSON.stringify(secrets));
        }
        if (connectionData) {
            resp.setConnectionData(JSON.stringify(connectionData));
        }
    }
    return resp;
}
exports.mapToExtractResponse = mapToExtractResponse;
function createLaunchHandlerRequest(launchRequest, apiOptions) {
    var connectorClass = launchRequest.connectorClass, connectionId = launchRequest.connectionId, pluginPath = launchRequest.pluginPath, size = launchRequest.size, extractorMode = launchRequest.extractorMode, connData = launchRequest.connectionData, secrets = launchRequest.secrets, locale = launchRequest.locale, language = launchRequest.language, accessToken = launchRequest.accessToken;
    var browserWatcherPort = apiOptions.browserWatcherPort, staticServerOptions = apiOptions.staticServerOptions, epsApiPort = apiOptions.epsApiPort;
    if (browserWatcherPort === undefined || staticServerOptions === undefined) {
        throw new Error("Required services for Launch are not enabled. browserWatcherPort: ".concat(browserWatcherPort, ", staticServerOptions: ").concat(staticServerOptions));
    }
    (0, handler_utils_1.validateCallerId)(launchRequest.callerId, apiOptions.callerId);
    (0, handler_utils_1.validateInstanceId)(launchRequest.epsInstanceId, apiOptions.epsInstanceId);
    (0, handler_utils_1.validatePluginPath)(launchRequest.pluginPath);
    var connectionData = tryParseToJson(connData, 'Connection Data');
    return {
        epsServiceInfo: {
            callerId: apiOptions.callerId,
            epsInstanceId: apiOptions.epsInstanceId,
            epsApiPort: epsApiPort,
            browserWatcherPort: browserWatcherPort,
            staticServerId: staticServerOptions.staticServerId,
            staticServerPort: staticServerOptions.staticServerPort,
        },
        launchUIOptions: {
            connectorClass: connectorClass,
            connectionId: connectionId,
            tacoPath: pluginPath,
            connectionData: connectionData,
            parentPositionSize: toDefaultSize(size),
            secrets: mapSecretsToObject(secrets, accessToken),
            extractorMode: extractorMode,
            i18n: {
                language: language !== null && language !== void 0 ? language : apiOptions.i18n.language,
                locale: locale !== null && locale !== void 0 ? locale : apiOptions.i18n.locale,
            },
        },
    };
}
exports.createLaunchHandlerRequest = createLaunchHandlerRequest;
function tryParseToJson(data, name) {
    if (!data) {
        return undefined;
    }
    try {
        return JSON.parse(data);
    }
    catch (error) {
        throw new Error("Incorrect format! Unable to parse ".concat(name, " to JSON!'"));
    }
}
exports.tryParseToJson = tryParseToJson;
function parseConnectionData(connData) {
    if (!connData) {
        throw new Error("Connection data is missing!");
    }
    var connectionData = tryParseToJson(connData, 'Connection Data');
    return connectionData;
}
exports.parseConnectionData = parseConnectionData;
function createExtractHandlerRequest(extractRequest, apiOptions) {
    var connectorClass = extractRequest.connectorClass, connectionId = extractRequest.connectionId, pluginPath = extractRequest.pluginPath, connData = extractRequest.connectionData, secrets = extractRequest.secrets, accessToken = extractRequest.accessToken;
    (0, handler_utils_1.validateCallerId)(extractRequest.callerId, apiOptions.callerId);
    (0, handler_utils_1.validateInstanceId)(extractRequest.epsInstanceId, apiOptions.epsInstanceId);
    (0, handler_utils_1.validatePluginPath)(extractRequest.pluginPath);
    var connectionData = parseConnectionData(connData);
    return {
        connectorClass: connectorClass,
        connectionId: connectionId,
        tacoPath: pluginPath,
        connectionData: connectionData,
        secrets: mapSecretsToObject(secrets, accessToken),
    };
}
exports.createExtractHandlerRequest = createExtractHandlerRequest;
var EpsServiceImpl = /** @class */ (function () {
    function EpsServiceImpl(extractorLaunchedEvent, // prettier
    apiOptions) {
        this.extractorLaunchedEvent = extractorLaunchedEvent;
        this.apiOptions = apiOptions;
        this.extractHandler = new extract_handler_1.ExtractHandler();
    }
    EpsServiceImpl.prototype.launch = function (call, callback) {
        return __awaiter(this, void 0, void 0, function () {
            var launchRequest, handlerRequest, launchResult, error, response, resp, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        launchRequest = call.request.toObject();
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        handlerRequest = createLaunchHandlerRequest(launchRequest, this.apiOptions);
                        return [4 /*yield*/, (0, launch_1.handleLaunch)(this.extractorLaunchedEvent, handlerRequest)];
                    case 2:
                        launchResult = _a.sent();
                        if (!launchResult) {
                            error = new Error("[gRPC] launch failed, launchResult: ".concat(launchResult));
                            eps_logger_1.Logger.error(error);
                            callback(error);
                            return [2 /*return*/];
                        }
                        response = launchResult.response;
                        if (isEPSErrorResponse(response)) {
                            callback(response);
                            return [2 /*return*/];
                        }
                        resp = mapToExtractResponse(response);
                        eps_logger_1.Logger.info('[gRPC] launch call succeeded, extractorId: ' + resp.getExtractorId());
                        callback(null, resp);
                        return [3 /*break*/, 4];
                    case 3:
                        error_1 = _a.sent();
                        callback(error_1, null);
                        return [2 /*return*/];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    EpsServiceImpl.prototype.extract = function (call, callback) {
        return __awaiter(this, void 0, void 0, function () {
            var extractRequest, handlerRequest, extractResult, error, response, resp, error_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        extractRequest = call.request.toObject();
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        handlerRequest = createExtractHandlerRequest(extractRequest, this.apiOptions);
                        return [4 /*yield*/, this.extractHandler.handleExtractRequest(this.extractorLaunchedEvent, handlerRequest)];
                    case 2:
                        extractResult = _a.sent();
                        if (!extractResult) {
                            error = new Error("[gRPC] extract failed, launchResult: ".concat(extractResult));
                            eps_logger_1.Logger.error(error);
                            callback(error);
                            return [2 /*return*/];
                        }
                        response = extractResult.response;
                        if (isEPSErrorResponse(response)) {
                            callback(response);
                            return [2 /*return*/];
                        }
                        resp = mapToExtractResponse(response);
                        eps_logger_1.Logger.info('[gRPC] extract call succeeded, extractorId: ' + resp.getExtractorId());
                        callback(null, resp);
                        return [3 /*break*/, 4];
                    case 3:
                        error_2 = _a.sent();
                        callback(error_2);
                        return [2 /*return*/];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    EpsServiceImpl.prototype.getAppUrl = function (call, callback) {
        return __awaiter(this, void 0, void 0, function () {
            var staticServerOptions, _a, connectionId, connectorClass, pluginPath, language, locale, result, resp, error_3;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        staticServerOptions = this.apiOptions.staticServerOptions;
                        if (staticServerOptions === undefined) {
                            throw new Error('Static server must be enabled for getAppUrl.');
                        }
                        _a = call.request.toObject(), connectionId = _a.connectionId, connectorClass = _a.connectorClass, pluginPath = _a.pluginPath, language = _a.language, locale = _a.locale;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, (0, app_url_1.getWebAuthoringAppUrl)({
                                connectionId: connectionId,
                                connectorClass: connectorClass,
                                pluginPath: pluginPath,
                                staticServerOptions: staticServerOptions,
                                i18n: {
                                    language: language !== null && language !== void 0 ? language : this.apiOptions.i18n.language,
                                    locale: locale !== null && locale !== void 0 ? locale : this.apiOptions.i18n.locale,
                                },
                            })];
                    case 2:
                        result = _b.sent();
                        resp = new eps_pb_1.AppUrlResponse();
                        resp.setConnectorAppUrl(result.connectorAppUrl);
                        callback(null, resp);
                        return [3 /*break*/, 4];
                    case 3:
                        error_3 = _b.sent();
                        callback(error_3, null);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    EpsServiceImpl.prototype.terminateExtractor = function (call, callback) {
        try {
            var _a = call.request.toObject(), connectionId = _a.connectionId, extractorIdList = _a.extractorIdList;
            var result = this.extractHandler.handleTerminationRequest({
                connectionId: connectionId,
                extractorIds: extractorIdList,
            });
            var resp = new eps_pb_1.TerminateExtractorResponse();
            resp.setExtractorIdList(result.freedExtractorIds);
            callback(null, resp);
        }
        catch (error) {
            callback(error, null);
        }
    };
    return EpsServiceImpl;
}());
exports.EpsServiceImpl = EpsServiceImpl;
function isEPSErrorResponse(response) {
    return 'errorMsg' in response;
}
//# sourceMappingURL=data:application/json;base64,