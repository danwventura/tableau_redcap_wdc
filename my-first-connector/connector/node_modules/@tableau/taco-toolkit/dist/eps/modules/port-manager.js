"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PortManager = void 0;
var portscanner_1 = __importDefault(require("portscanner"));
var eps_logger_1 = require("../logging/eps-logger");
var PortManager = /** @class */ (function () {
    function PortManager(start, end, reservedPorts) {
        if (reservedPorts === void 0) { reservedPorts = []; }
        this.start = start;
        this.end = end;
        this.reservedPorts = new Set(reservedPorts);
    }
    /**
     * Returns an unused port within the given range and reserve it on the PortManager instance.
     */
    PortManager.prototype.reserveUnusedPort = function () {
        return __awaiter(this, void 0, void 0, function () {
            var port;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getUnusedPort()];
                    case 1:
                        port = _a.sent();
                        this.reservedPorts.add(port);
                        return [2 /*return*/, port];
                }
            });
        });
    };
    /**
     * Returns an unused port within the given range.
     */
    PortManager.prototype.getUnusedPort = function () {
        return __awaiter(this, void 0, void 0, function () {
            var port, startPort, err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        startPort = this.getStartPort();
                        _a.label = 1;
                    case 1:
                        if (startPort > this.end) {
                            throw new Error("There are not any available ports within the range: ".concat(this.start, "-").concat(this.end));
                        }
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, portscanner_1.default.findAPortNotInUse(startPort, this.end)];
                    case 3:
                        port = _a.sent();
                        return [3 /*break*/, 5];
                    case 4:
                        err_1 = _a.sent();
                        err_1.message = "Unable to find open ports within the range: ".concat(startPort, " - ").concat(this.end, ".\n").concat(err_1.message);
                        throw err_1;
                    case 5:
                        startPort = this.getNextPort(port);
                        _a.label = 6;
                    case 6:
                        if (this.reservedPorts.has(port)) return [3 /*break*/, 1];
                        _a.label = 7;
                    case 7:
                        eps_logger_1.Logger.info("Port ".concat(port, " is available"));
                        return [2 /*return*/, port];
                }
            });
        });
    };
    /**
     * This function is designated to get reserved ports for EPS main services, so that
     * extractors may skip these ports during start.
     *
     * It must be called after all EPS main services have started, e.g. static server,
     * eps api, grpc server, etc. Otherwise, it could potentially cause race condition,
     * since the port detection is async.
     */
    PortManager.prototype.getReservedPorts = function () {
        return Array.from(this.reservedPorts);
    };
    PortManager.prototype.getPortRange = function () {
        return [this.start, this.end];
    };
    /**
     * Get the actual start port for scanning. It returns the first non-reserved port
     * in the given range.
     */
    PortManager.prototype.getStartPort = function () {
        var port = this.start;
        while (this.reservedPorts.has(port)) {
            port += 1;
        }
        return port;
    };
    /**
     * Move to next non-reserved port
     */
    PortManager.prototype.getNextPort = function (port) {
        var next = port + 1;
        while (this.reservedPorts.has(next)) {
            next += 1;
        }
        return next;
    };
    return PortManager;
}());
exports.PortManager = PortManager;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9ydC1tYW5hZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2Vwcy9tb2R1bGVzL3BvcnQtbWFuYWdlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSw0REFBcUM7QUFDckMsb0RBQThDO0FBRTlDO0lBS0UscUJBQVksS0FBYSxFQUFFLEdBQVcsRUFBRSxhQUE0QjtRQUE1Qiw4QkFBQSxFQUFBLGtCQUE0QjtRQUNsRSxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQTtRQUNsQixJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQTtRQUNkLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxHQUFHLENBQUMsYUFBYSxDQUFDLENBQUE7SUFDN0MsQ0FBQztJQUVEOztPQUVHO0lBQ0csdUNBQWlCLEdBQXZCOzs7Ozs0QkFDZSxxQkFBTSxJQUFJLENBQUMsYUFBYSxFQUFFLEVBQUE7O3dCQUFqQyxJQUFJLEdBQUcsU0FBMEI7d0JBQ3ZDLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFBO3dCQUU1QixzQkFBTyxJQUFJLEVBQUE7Ozs7S0FDWjtJQUVEOztPQUVHO0lBQ0csbUNBQWEsR0FBbkI7Ozs7Ozt3QkFFTSxTQUFTLEdBQUcsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFBOzs7d0JBR2pDLElBQUksU0FBUyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUU7NEJBQ3hCLE1BQU0sSUFBSSxLQUFLLENBQUMsOERBQXVELElBQUksQ0FBQyxLQUFLLGNBQUksSUFBSSxDQUFDLEdBQUcsQ0FBRSxDQUFDLENBQUE7eUJBQ2pHOzs7O3dCQUdRLHFCQUFNLHFCQUFXLENBQUMsaUJBQWlCLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBQTs7d0JBQS9ELElBQUksR0FBRyxTQUF3RCxDQUFBOzs7O3dCQUUvRCxLQUFHLENBQUMsT0FBTyxHQUFHLHNEQUErQyxTQUFTLGdCQUFNLElBQUksQ0FBQyxHQUFHLGdCQUFNLEtBQUcsQ0FBQyxPQUFPLENBQUUsQ0FBQTt3QkFDdkcsTUFBTSxLQUFHLENBQUE7O3dCQUdYLFNBQVMsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFBOzs7NEJBQzNCLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQzs7O3dCQUVyQyxtQkFBTSxDQUFDLElBQUksQ0FBQyxlQUFRLElBQUksa0JBQWUsQ0FBQyxDQUFBO3dCQUN4QyxzQkFBTyxJQUFJLEVBQUE7Ozs7S0FDWjtJQUVEOzs7Ozs7O09BT0c7SUFDSCxzQ0FBZ0IsR0FBaEI7UUFDRSxPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFBO0lBQ3ZDLENBQUM7SUFFRCxrQ0FBWSxHQUFaO1FBQ0UsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFBO0lBQy9CLENBQUM7SUFFRDs7O09BR0c7SUFDSyxrQ0FBWSxHQUFwQjtRQUNFLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUE7UUFDckIsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUNuQyxJQUFJLElBQUksQ0FBQyxDQUFBO1NBQ1Y7UUFFRCxPQUFPLElBQUksQ0FBQTtJQUNiLENBQUM7SUFFRDs7T0FFRztJQUNLLGlDQUFXLEdBQW5CLFVBQW9CLElBQVk7UUFDOUIsSUFBSSxJQUFJLEdBQUcsSUFBSSxHQUFHLENBQUMsQ0FBQTtRQUNuQixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ25DLElBQUksSUFBSSxDQUFDLENBQUE7U0FDVjtRQUNELE9BQU8sSUFBSSxDQUFBO0lBQ2IsQ0FBQztJQUNILGtCQUFDO0FBQUQsQ0FBQyxBQXRGRCxJQXNGQztBQXRGWSxrQ0FBVyJ9