"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TempDataManager = void 0;
var fs_1 = __importDefault(require("fs"));
var path_1 = __importDefault(require("path"));
var eps_logger_1 = require("../logging/eps-logger");
var file_path_1 = require("../utils/file-path");
var TempDataManager = /** @class */ (function () {
    function TempDataManager(epsInstanceId, tempDirRootPath) {
        this.epsInstanceId = epsInstanceId;
        this.tempDirRootPath = path_1.default.resolve(tempDirRootPath, 'tempData');
        if (this.tempDirRootPath.length >= 136) {
            // Duckdb read APIs can only support filepaths less than 255 characters in length.
            // Fixed path after tempData for Windows is 119 characters, so tempDirRootPath length
            // has to be less than 136.
            throw new Error("tempDirRootPath has to be less than 136 characters in length. tempDirRootPath: ".concat(this.tempDirRootPath));
        }
    }
    // path example: <tempDirRootPath>/tempData/eps-489f4343-1e73-4a22-b047-f0063969c28a/ext-b8ced5be-a728-4a71-98b4-6674cb064498/f-098f6bcd4621d373cade4e832627b4f6
    TempDataManager.prototype.getTempDataFilePath = function (extractorId, filename) {
        var tempDataDir = getExtractorDirPath(this.tempDirRootPath, this.epsInstanceId, extractorId);
        var filepath = path_1.default.join(tempDataDir, "f-".concat((0, file_path_1.getMD5Hash)(filename)));
        // Duckdb read APIs can only support filepaths less than 255 characters in length.
        if (filepath.length >= 255) {
            throw new Error("Temporary data filepath has to be less than 255 characters in length. tempDataFilePath: ".concat(filepath));
        }
        return filepath;
    };
    /**
     * Retrieves the directory path containing partitioned data stored as multiple files
     * associated with a specific table. e.g. parquet data
     *
     * @returns The directory path for the partitioned data of the specified table and extractor.
     * example: <tempDirRootPath>/tempData/eps-489f4343-1e73-4a22-b047-f0063969c28a/ext-b8ced5be-a728-4a71-98b4-6674cb064498/f-098f6bcd4621d373cade4e832627b4f6/
     */
    TempDataManager.prototype.getTempDataDirPath = function (extractorId, dirName) {
        var tempDataDir = getExtractorDirPath(this.tempDirRootPath, this.epsInstanceId, extractorId);
        var dirPath = path_1.default.join(tempDataDir, "f-".concat((0, file_path_1.getMD5Hash)(dirName)));
        return dirPath;
    };
    TempDataManager.prototype.createTempDataDirIfNotExists = function (extractorId) {
        // Adding eps- and extractor- prefixes to make sure that
        // directory creation is successful on Windows OS.
        var tempDataDir = getExtractorDirPath(this.tempDirRootPath, this.epsInstanceId, extractorId);
        // create temp log dir if it does not exist
        if (!fs_1.default.existsSync(tempDataDir)) {
            fs_1.default.mkdirSync(tempDataDir, { recursive: true });
            eps_logger_1.Logger.info("Temporary data directory created: ".concat(tempDataDir));
        }
        return tempDataDir;
    };
    TempDataManager.prototype.deleteExtractorTempDataDir = function (extractorId) {
        var tempDataDir = getExtractorDirPath(this.tempDirRootPath, this.epsInstanceId, extractorId);
        eps_logger_1.Logger.info("Clean up Extractor temporary data directory if exists: ".concat(tempDataDir));
        removeDirIfExists(tempDataDir);
    };
    TempDataManager.prototype.deleteEpsTempDataDir = function () {
        var dirPath = getEPSInstanceDirPath(this.tempDirRootPath, this.epsInstanceId);
        eps_logger_1.Logger.info("Clean up EPS temporary data directory if exists: ".concat(dirPath));
        removeDirIfExists(dirPath);
    };
    return TempDataManager;
}());
exports.TempDataManager = TempDataManager;
/**
 * Delete the given directory if it exists.
 *
 * It was observed that ENOTEMPTY error is intermittently thrown on Windows,
 * so the function will do 3 retries for deletion.
 */
function removeDirIfExists(dirPath) {
    if (fs_1.default.existsSync(dirPath)) {
        fs_1.default.rmSync(dirPath, {
            recursive: true,
            force: true,
            maxRetries: 3,
            retryDelay: 500,
        });
        eps_logger_1.Logger.info("Removed: ".concat(dirPath));
    }
}
function getExtractorDirPath(tempDirRootPath, epsInstanceId, extractorId) {
    var epsInstanceDirPath = getEPSInstanceDirPath(tempDirRootPath, epsInstanceId);
    return path_1.default.join(epsInstanceDirPath, "ext-".concat(extractorId));
}
function getEPSInstanceDirPath(tempDirRootPath, epsInstanceId) {
    return path_1.default.join(tempDirRootPath, "eps-".concat(epsInstanceId));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVtcC1kYXRhLW1hbmFnZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvZXBzL21vZHVsZXMvdGVtcC1kYXRhLW1hbmFnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsMENBQW1CO0FBQ25CLDhDQUF1QjtBQUN2QixvREFBOEM7QUFDOUMsZ0RBQStDO0FBRS9DO0lBSUUseUJBQVksYUFBcUIsRUFBRSxlQUF1QjtRQUN4RCxJQUFJLENBQUMsYUFBYSxHQUFHLGFBQWEsQ0FBQTtRQUNsQyxJQUFJLENBQUMsZUFBZSxHQUFHLGNBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxFQUFFLFVBQVUsQ0FBQyxDQUFBO1FBQ2hFLElBQUksSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLElBQUksR0FBRyxFQUFFO1lBQ3RDLGtGQUFrRjtZQUNsRixxRkFBcUY7WUFDckYsMkJBQTJCO1lBQzNCLE1BQU0sSUFBSSxLQUFLLENBQ2IseUZBQWtGLElBQUksQ0FBQyxlQUFlLENBQUUsQ0FDekcsQ0FBQTtTQUNGO0lBQ0gsQ0FBQztJQUVELGdLQUFnSztJQUNoSyw2Q0FBbUIsR0FBbkIsVUFBb0IsV0FBbUIsRUFBRSxRQUFnQjtRQUN2RCxJQUFNLFdBQVcsR0FBRyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFFLElBQUksQ0FBQyxhQUFhLEVBQUUsV0FBVyxDQUFDLENBQUE7UUFDOUYsSUFBTSxRQUFRLEdBQUcsY0FBSSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsWUFBSyxJQUFBLHNCQUFVLEVBQUMsUUFBUSxDQUFDLENBQUUsQ0FBQyxDQUFBO1FBQ3BFLGtGQUFrRjtRQUNsRixJQUFJLFFBQVEsQ0FBQyxNQUFNLElBQUksR0FBRyxFQUFFO1lBQzFCLE1BQU0sSUFBSSxLQUFLLENBQ2Isa0dBQTJGLFFBQVEsQ0FBRSxDQUN0RyxDQUFBO1NBQ0Y7UUFDRCxPQUFPLFFBQVEsQ0FBQTtJQUNqQixDQUFDO0lBRUQ7Ozs7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