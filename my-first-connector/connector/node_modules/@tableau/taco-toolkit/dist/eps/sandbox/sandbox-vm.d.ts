import ivm, { TransferOptions } from 'isolated-vm';
import { HandlerInput } from '../../shared/types/handler-input';
import { Permission } from '../../shared/types/permission';
import { NetworkAdapter } from '../modules/network-adapter';
import { TempDataManager } from '../modules/temp-data-manager';
export default class SandboxVM {
    private isolate;
    private context;
    private global;
    private importedModules;
    private permission;
    private handlerInput;
    private tempDataManager;
    private networkAdapter;
    constructor(handlerInput: HandlerInput, tempDataManager: TempDataManager, networkAdapter: NetworkAdapter, permission?: Permission, memoryLimit?: number);
    private createNativeMethods;
    importModule(modulePath: string): Promise<void>;
    addProperty(name: string, value?: ivm.Dereference<any>, transferOptions?: TransferOptions): void;
    getProperty(name: string): any;
    addMethod(name: string, fn: (...args: any) => void, options?: ivm.ContextEvalOptions | undefined): void;
    getMethod(name: string): any;
    getPermission(): Permission | undefined;
    getHandlerInput(): HandlerInput;
    getTempDataManager(): TempDataManager;
    getNetworkAdapter(): NetworkAdapter;
    executeCodeWithParameters(code: string, args: any[] | undefined, options: ivm.ContextEvalClosureOptions): Promise<any>;
    executeCode(code: string, options?: ivm.ContextEvalOptions): Promise<any>;
    executeCodeSync(code: string, options?: ivm.ContextEvalOptions): any;
}
