import { RequestOptions } from '../../../../shared/app-transport/request';
import { DataRow } from '../../../../shared/types/data-row';
import { HandlerInput } from '../../../../shared/types/handler-input';
import { HTTPMethod } from '../../../../shared/types/http';
import { NetworkAdapter, NetworkAdapterFetchOptions } from '../../../modules/network-adapter';
import { TempDataManager } from '../../../modules/temp-data-manager';
import { SandboxPlugin } from '../sandbox-plugin';
/**
 * Request options for fetchJson and fetchArrayBuffer
 */
export interface FetchRequestOptions extends RequestOptions {
    /** HTTP method, GET or POST. Default value is GET. */
    method?: Extract<HTTPMethod, 'GET' | 'POST'>;
    /**
     * Request body.
     *
     * When an object is provided for body, it will be serialized into JSON string by default.
     * When application/x-www-form-urlencoded header is provided, the object will be serialized as query params.
     */
    body?: string | object;
}
export interface LoadDataOptions extends RequestOptions {
    headers?: Record<string, string>;
    method?: Extract<HTTPMethod, 'GET' | 'POST'>;
    body?: string | object;
}
export interface LoadCsvDataOptions extends LoadDataOptions {
    /**
     * If this attribute is set to true, it will remove subsequent column headers from next chunk before writing to disk
     */
    trimColumnHeader?: boolean;
}
/**
 * The type for the request options of {@link FetchUtils.fetchJson}.
 */
export type FetchJsonOptions = FetchRequestOptions;
/**
 * The type for the request options of {@link FetchUtils.fetchArrayBuffer}.
 */
export type FetchArrayBufferOptions = FetchRequestOptions;
export type fetchJsonType = ReturnType<typeof createFetchJson>;
export type fetchArrayBufferType = ReturnType<typeof createFetchArrayBuffer>;
export type loadCsvDataType = ReturnType<typeof createLoadCsvData>;
export type loadExcelDataType = ReturnType<typeof createLoadExcelData>;
export type loadParquetDataType = ReturnType<typeof createLoadParquetData>;
export type ingestDataRowsType = ReturnType<typeof createIngestDataRows>;
export default class FetchUtilsPlugin extends SandboxPlugin {
    init(): void;
}
declare function createFetchJson(fetchUtilsSDK: FetchUtilsPlugin): <D = any>(url: string, options?: FetchJsonOptions) => Promise<D>;
declare function createLoadExcelData(fetchUtilsSDK: FetchUtilsPlugin): (url: string, options?: LoadDataOptions | undefined) => Promise<void>;
declare function createLoadParquetData(fetchUtilsSDK: FetchUtilsPlugin): (url: string, options?: LoadDataOptions) => Promise<void>;
declare function createLoadCsvData(fetchUtilsSDK: FetchUtilsPlugin): (url: string, options?: LoadCsvDataOptions) => Promise<void>;
declare function createIngestDataRows(fetchUtilsSDK: FetchUtilsPlugin): (rows: DataRow[]) => Promise<void>;
declare function createFetchArrayBuffer(fetchUtilsSDK: FetchUtilsPlugin): (url: string, options?: FetchArrayBufferOptions) => Promise<Uint8Array>;
export declare function fetchJson<D>(networkAdapter: NetworkAdapter, url: string, options?: FetchJsonOptions): Promise<D>;
export declare function fetchArrayBuffer(networkAdapter: NetworkAdapter, url: string, options?: FetchArrayBufferOptions): Promise<Uint8Array>;
export declare function loadCsvData(handlerInput: HandlerInput, tempDataManager: TempDataManager, networkAdapter: NetworkAdapter, url: string, options?: LoadCsvDataOptions): Promise<void>;
export declare function loadData(handlerInput: HandlerInput, tempDataManager: TempDataManager, networkAdapter: NetworkAdapter, url: string, options?: LoadDataOptions): Promise<void>;
export declare function loadParquetData(handlerInput: HandlerInput, tempDataManager: TempDataManager, networkAdapter: NetworkAdapter, tableFileCounter: Record<string, number>, url: string, options?: LoadDataOptions): Promise<void>;
/**
 * Using HandlerInput for now because we are getting HandlerInput via sandbox during runtime, and the type is HandlerInput.
 * When we export the API from SDK we should use FileBasedHandlerInput instead.
 */
export declare function ingestDataRows(handlerInput: HandlerInput, tempDataManager: TempDataManager, rows: DataRow[]): Promise<void>;
export declare function getFetchParams(urlString: string, options: LoadDataOptions | FetchRequestOptions | undefined): {
    urlWithQuery: string;
    options: NetworkAdapterFetchOptions;
};
export {};
