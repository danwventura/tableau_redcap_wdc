"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.log = exports.registerSandboxSdk = void 0;
var auth_credentials_1 = require("../../../shared/auth-credentials");
var data_container_1 = require("../../../shared/types/data-container");
var data_table_1 = require("../../../shared/types/data-table");
var eps_logger_1 = require("../../logging/eps-logger");
var aws_signing_utils_1 = require("./fetcher-utils/aws-signing-utils");
var aws_utils_1 = __importDefault(require("./fetcher-utils/aws-utils"));
var fetch_utils_1 = __importDefault(require("./fetcher-utils/fetch-utils"));
var csv_utils_1 = __importDefault(require("./parser-utils/csv-utils"));
var eps_utils_1 = __importDefault(require("./parser-utils/eps-utils"));
var excel_utils_1 = __importDefault(require("./parser-utils/excel-utils"));
var parquet_utils_1 = __importDefault(require("./parser-utils/parquet-utils"));
var sdk_module_loader_1 = require("./sdk-module-loader");
function registerSandboxSdk(sandbox) {
    registerCoreFeatures(sandbox);
    registerPlugins(sandbox);
}
exports.registerSandboxSdk = registerSandboxSdk;
function registerCoreFeatures(sandbox) {
    // CommonJS global properties
    sandbox.addProperty('exports');
    sandbox.addProperty('module');
    // sdk bundle
    sandbox.executeCodeSync((0, sdk_module_loader_1.getSdkModuleBundle)());
    // static funtions
    sandbox.addMethod('log', log);
    sandbox.addMethod('getAuthHeader', auth_credentials_1.getAuthHeader);
    sandbox.addMethod('getBasicAuthHeader', auth_credentials_1.getBasicAuthHeader);
    sandbox.addMethod('getOAuthHeader', auth_credentials_1.getOAuthHeader);
    // not public, used in the text pipeline code
    sandbox.addMethod('createDataTable', data_table_1.createDataTable);
    sandbox.addMethod('createDataContainer', data_container_1.createDataContainer);
}
function registerPlugins(sandbox) {
    var e_1, _a;
    // add plugins to sandbox
    var plugins = [
        // public utils
        new fetch_utils_1.default(sandbox),
        new csv_utils_1.default(sandbox),
        new excel_utils_1.default(sandbox),
        new parquet_utils_1.default(sandbox),
        // for internal use only
        new aws_utils_1.default(sandbox),
        new aws_signing_utils_1.AwsSigningUtils(sandbox),
        new eps_utils_1.default(sandbox),
    ];
    try {
        for (var plugins_1 = __values(plugins), plugins_1_1 = plugins_1.next(); !plugins_1_1.done; plugins_1_1 = plugins_1.next()) {
            var plugin = plugins_1_1.value;
            plugin.init();
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (plugins_1_1 && !plugins_1_1.done && (_a = plugins_1.return)) _a.call(plugins_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
}
// Note: this is a function for connectors. Do not use it in EPS internally.
/**
 * A global function for connector handlers to log information to log file.
 */
function log(arg) {
    eps_logger_1.Logger.info(arg);
}
exports.log = log;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2FuZGJveC1zZGsuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvZXBzL3NhbmRib3gvc2RrL3NhbmRib3gtc2RrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEscUVBQW9HO0FBQ3BHLHVFQUEwRTtBQUMxRSwrREFBa0U7QUFDbEUsdURBQWlEO0FBRWpELHVFQUFtRTtBQUNuRSx3RUFBZ0Q7QUFDaEQsNEVBQTBEO0FBQzFELHVFQUFxRDtBQUNyRCx1RUFBcUQ7QUFDckQsMkVBQXlEO0FBQ3pELCtFQUE2RDtBQUU3RCx5REFBd0Q7QUFFeEQsU0FBZ0Isa0JBQWtCLENBQUMsT0FBa0I7SUFDbkQsb0JBQW9CLENBQUMsT0FBTyxDQUFDLENBQUE7SUFDN0IsZUFBZSxDQUFDLE9BQU8sQ0FBQyxDQUFBO0FBQzFCLENBQUM7QUFIRCxnREFHQztBQUVELFNBQVMsb0JBQW9CLENBQUMsT0FBa0I7SUFDOUMsNkJBQTZCO0lBQzdCLE9BQU8sQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUE7SUFDOUIsT0FBTyxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQTtJQUU3QixhQUFhO0lBQ2IsT0FBTyxDQUFDLGVBQWUsQ0FBQyxJQUFBLHNDQUFrQixHQUFFLENBQUMsQ0FBQTtJQUU3QyxrQkFBa0I7SUFDbEIsT0FBTyxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUE7SUFDN0IsT0FBTyxDQUFDLFNBQVMsQ0FBQyxlQUFlLEVBQUUsZ0NBQWEsQ0FBQyxDQUFBO0lBQ2pELE9BQU8sQ0FBQyxTQUFTLENBQUMsb0JBQW9CLEVBQUUscUNBQWtCLENBQUMsQ0FBQTtJQUMzRCxPQUFPLENBQUMsU0FBUyxDQUFDLGdCQUFnQixFQUFFLGlDQUFjLENBQUMsQ0FBQTtJQUVuRCw2Q0FBNkM7SUFDN0MsT0FBTyxDQUFDLFNBQVMsQ0FBQyxpQkFBaUIsRUFBRSw0QkFBZSxDQUFDLENBQUE7SUFDckQsT0FBTyxDQUFDLFNBQVMsQ0FBQyxxQkFBcUIsRUFBRSxvQ0FBbUIsQ0FBQyxDQUFBO0FBQy9ELENBQUM7QUFFRCxTQUFTLGVBQWUsQ0FBQyxPQUFrQjs7SUFDekMseUJBQXlCO0lBQ3pCLElBQU0sT0FBTyxHQUFvQjtRQUMvQixlQUFlO1FBQ2YsSUFBSSxxQkFBZ0IsQ0FBQyxPQUFPLENBQUM7UUFDN0IsSUFBSSxtQkFBYyxDQUFDLE9BQU8sQ0FBQztRQUMzQixJQUFJLHFCQUFnQixDQUFDLE9BQU8sQ0FBQztRQUM3QixJQUFJLHVCQUFrQixDQUFDLE9BQU8sQ0FBQztRQUMvQix3QkFBd0I7UUFDeEIsSUFBSSxtQkFBUSxDQUFDLE9BQU8sQ0FBQztRQUNyQixJQUFJLG1DQUFlLENBQUMsT0FBTyxDQUFDO1FBQzVCLElBQUksbUJBQWMsQ0FBQyxPQUFPLENBQUM7S0FDNUIsQ0FBQTs7UUFDRCxLQUFxQixJQUFBLFlBQUEsU0FBQSxPQUFPLENBQUEsZ0NBQUEscURBQUU7WUFBekIsSUFBTSxNQUFNLG9CQUFBO1lBQ2YsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFBO1NBQ2Q7Ozs7Ozs7OztBQUNILENBQUM7QUFFRCw0RUFBNEU7QUFDNUU7O0dBRUc7QUFDSCxTQUFnQixHQUFHLENBQUMsR0FBWTtJQUM5QixtQkFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQTtBQUNsQixDQUFDO0FBRkQsa0JBRUMifQ==