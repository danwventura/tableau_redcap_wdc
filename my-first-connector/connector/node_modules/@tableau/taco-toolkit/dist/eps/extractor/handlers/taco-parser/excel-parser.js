"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExcelTacoParser = void 0;
var fs_1 = __importDefault(require("fs"));
var eps_logger_1 = require("../../../logging/eps-logger");
var excel_utils_1 = require("../../../sandbox/sdk/parser-utils/excel-utils");
var ExcelTacoParser = /** @class */ (function () {
    function ExcelTacoParser(tempDataManager, extractorId, filename) {
        this.tempDataManager = tempDataManager;
        this.extractorId = extractorId;
        this.filename = filename;
    }
    ExcelTacoParser.prototype.parse = function () {
        return __awaiter(this, void 0, void 0, function () {
            var filePath, buffer, fileSizeinMB, tables;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        eps_logger_1.Logger.info('ExcelTacoParser.parse() started');
                        filePath = this.tempDataManager.getTempDataFilePath(this.extractorId, this.filename);
                        return [4 /*yield*/, fs_1.default.promises.readFile(filePath)
                            // if buffer size is larger than 500 MB limit, we throw error
                            // due to xlsx parser limitation
                        ];
                    case 1:
                        buffer = _a.sent();
                        fileSizeinMB = buffer.byteLength / (1024 * 1024);
                        if (fileSizeinMB > 500) {
                            throw new Error("ExcelTacoParser.parse(): Excel file size is ".concat(fileSizeinMB, " which is larger than 500 MB"));
                        }
                        return [4 /*yield*/, (0, excel_utils_1.parse)(buffer)];
                    case 2:
                        tables = _a.sent();
                        eps_logger_1.Logger.info('ExcelTacoParser.parse() done');
                        return [2 /*return*/, tables];
                }
            });
        });
    };
    return ExcelTacoParser;
}());
exports.ExcelTacoParser = ExcelTacoParser;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhjZWwtcGFyc2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2Vwcy9leHRyYWN0b3IvaGFuZGxlcnMvdGFjby1wYXJzZXIvZXhjZWwtcGFyc2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLDBDQUFtQjtBQUduQiwwREFBb0Q7QUFDcEQsNkVBQXFFO0FBR3JFO0lBQ0UseUJBQW9CLGVBQWdDLEVBQVUsV0FBbUIsRUFBVSxRQUFnQjtRQUF2RixvQkFBZSxHQUFmLGVBQWUsQ0FBaUI7UUFBVSxnQkFBVyxHQUFYLFdBQVcsQ0FBUTtRQUFVLGFBQVEsR0FBUixRQUFRLENBQVE7SUFBRyxDQUFDO0lBRXpHLCtCQUFLLEdBQVg7Ozs7Ozt3QkFDRSxtQkFBTSxDQUFDLElBQUksQ0FBQyxpQ0FBaUMsQ0FBQyxDQUFBO3dCQUN4QyxRQUFRLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQTt3QkFDM0UscUJBQU0sWUFBRSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDOzRCQUVuRCw2REFBNkQ7NEJBQzdELGdDQUFnQzswQkFIbUI7O3dCQUE3QyxNQUFNLEdBQUcsU0FBb0M7d0JBSTdDLFlBQVksR0FBRyxNQUFNLENBQUMsVUFBVSxHQUFHLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxDQUFBO3dCQUN0RCxJQUFJLFlBQVksR0FBRyxHQUFHLEVBQUU7NEJBQ3RCLE1BQU0sSUFBSSxLQUFLLENBQUMsc0RBQStDLFlBQVksaUNBQThCLENBQUMsQ0FBQTt5QkFDM0c7d0JBRWMscUJBQU0sSUFBQSxtQkFBSyxFQUFDLE1BQU0sQ0FBQyxFQUFBOzt3QkFBNUIsTUFBTSxHQUFHLFNBQW1CO3dCQUNsQyxtQkFBTSxDQUFDLElBQUksQ0FBQyw4QkFBOEIsQ0FBQyxDQUFBO3dCQUUzQyxzQkFBTyxNQUFNLEVBQUE7Ozs7S0FDZDtJQUNILHNCQUFDO0FBQUQsQ0FBQyxBQXBCRCxJQW9CQztBQXBCWSwwQ0FBZSJ9