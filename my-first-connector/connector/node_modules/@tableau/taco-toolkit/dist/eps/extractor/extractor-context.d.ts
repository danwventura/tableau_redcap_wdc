import { ConnectorPhase } from '../../shared/enums/connector-phase';
import { AuthResult } from '../../shared/types/auth-result';
import { ConnectorJson } from '../../shared/types/connector-json';
import { DataContainer } from '../../shared/types/data-container';
import { HandlerInput } from '../../shared/types/handler-input';
import { ExtractorOptions } from '../types/extractor-options';
import { ExtractorHealth } from './extractor-health';
interface EPSInfo {
    epsInstanceId: string;
    epsTempDirPath: string;
}
export default class ExtractorContext {
    health: ExtractorHealth;
    fetchState: {
        [tableName: string]: {
            fetched: boolean;
            startOffset: number;
        };
    };
    /** Path to the connector's unpacked handlers folder */
    readonly handlersDir: string;
    readonly connectorJson: ConnectorJson;
    readonly connectionId: string;
    readonly handlerInputs: readonly HandlerInput[];
    container: DataContainer;
    connector: ExtractorOptions;
    phase: ConnectorPhase;
    authResult: AuthResult;
    readonly extractorId: string;
    readonly epsInstanceId: string;
    readonly epsTempDirPath: string;
    constructor(extractorId: string, extractorOptions: ExtractorOptions, epsInfo: EPSInfo);
}
export {};
