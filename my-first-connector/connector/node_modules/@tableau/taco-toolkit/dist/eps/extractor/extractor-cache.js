"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addTacoFileParserIntoCache = exports.updateExtractorCacheFromExtractorContext = exports.mergeTablesIntoExtractorCache = void 0;
var data_container_1 = require("../../shared/types/data-container");
var parser_1 = require("./handlers/abstract/parser");
var ExtractorCache = /** @class */ (function () {
    function ExtractorCache() {
        /**
         * tableName -> FileParser
         */
        this.fileParserMap = {};
    }
    return ExtractorCache;
}());
var extractorCache = new ExtractorCache();
exports.default = extractorCache;
/**
 * merge the tables into ExtracorCache (ExtracorCache.cache, ExtracorCache.context.container)
 * currently, it's done by MemoryStore.run() for in-memory based
 * @param tables
 */
function mergeTablesIntoExtractorCache(tables) {
    var context = extractorCache.context;
    if (context.container === undefined) {
        var dataContainer = (0, data_container_1.createDataContainer)();
        var containerBuilder = parser_1.Parser.createContainerBuilder(dataContainer);
        containerBuilder.appendTables(tables);
        context.container = containerBuilder.getDataContainer();
    }
    else {
        // Merge tables, overwrite old tables with new versions.
        var existingTables_1 = context.container.tables;
        tables.forEach(function (t) {
            var replaceInd = existingTables_1.findIndex(function (prevTable) { return prevTable.name === t.name; });
            if (replaceInd !== -1) {
                existingTables_1[replaceInd] = t;
            }
            else {
                existingTables_1.push(t);
            }
        });
    }
    updateExtractorCacheFromExtractorContext(context);
}
exports.mergeTablesIntoExtractorCache = mergeTablesIntoExtractorCache;
/**
 * Update ExtracorCache.cache (DataContainer) with the DataContainer insde ExtracorCache.context.container
 * and ExtracorCache.context with above context
 * @param context
 */
function updateExtractorCacheFromExtractorContext(context) {
    extractorCache.context = context;
    extractorCache.cache = context.container;
}
exports.updateExtractorCacheFromExtractorContext = updateExtractorCacheFromExtractorContext;
function addTacoFileParserIntoCache(tableName, tacoFileParser) {
    var cache = extractorCache.cache;
    // note: the type of ExtractorCache is NOT accurate. 'cache' could be undefined.
    var table = cache === null || cache === void 0 ? void 0 : cache.tables.find(function (table) { return table.name === tableName; });
    // for deferred pipeline, if metadata (columnHeaders) are already provided,
    // set the columnHeaders into the parser.
    if (table && table.columns.length > 0) {
        tacoFileParser.setColumnHeaders(table.columns);
    }
    extractorCache.fileParserMap[tableName] = tacoFileParser;
}
exports.addTacoFileParserIntoCache = addTacoFileParserIntoCache;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXh0cmFjdG9yLWNhY2hlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2Vwcy9leHRyYWN0b3IvZXh0cmFjdG9yLWNhY2hlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLG9FQUFzRjtBQUN0RixxREFBbUQ7QUFJbkQ7SUFBQTtRQUdFOztXQUVHO1FBQ0ksa0JBQWEsR0FBbUMsRUFBRSxDQUFBO0lBQzNELENBQUM7SUFBRCxxQkFBQztBQUFELENBQUMsQUFQRCxJQU9DO0FBRUQsSUFBTSxjQUFjLEdBQUcsSUFBSSxjQUFjLEVBQUUsQ0FBQTtBQUMzQyxrQkFBZSxjQUFjLENBQUE7QUFFN0I7Ozs7R0FJRztBQUNILFNBQWdCLDZCQUE2QixDQUFDLE1BQW1CO0lBQ3ZELElBQUEsT0FBTyxHQUFLLGNBQWMsUUFBbkIsQ0FBbUI7SUFDbEMsSUFBSSxPQUFPLENBQUMsU0FBUyxLQUFLLFNBQVMsRUFBRTtRQUNuQyxJQUFNLGFBQWEsR0FBRyxJQUFBLG9DQUFtQixHQUFFLENBQUE7UUFDM0MsSUFBTSxnQkFBZ0IsR0FBRyxlQUFNLENBQUMsc0JBQXNCLENBQUMsYUFBYSxDQUFDLENBQUE7UUFDckUsZ0JBQWdCLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFBO1FBQ3JDLE9BQU8sQ0FBQyxTQUFTLEdBQUcsZ0JBQWdCLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQTtLQUN4RDtTQUFNO1FBQ0wsd0RBQXdEO1FBQ2hELElBQVEsZ0JBQWMsR0FBSyxPQUFPLENBQUMsU0FBUyxPQUF0QixDQUFzQjtRQUNwRCxNQUFNLENBQUMsT0FBTyxDQUFDLFVBQUMsQ0FBQztZQUNmLElBQU0sVUFBVSxHQUFHLGdCQUFjLENBQUMsU0FBUyxDQUFDLFVBQUMsU0FBUyxJQUFLLE9BQUEsU0FBUyxDQUFDLElBQUksS0FBSyxDQUFDLENBQUMsSUFBSSxFQUF6QixDQUF5QixDQUFDLENBQUE7WUFDckYsSUFBSSxVQUFVLEtBQUssQ0FBQyxDQUFDLEVBQUU7Z0JBQ3JCLGdCQUFjLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFBO2FBQy9CO2lCQUFNO2dCQUNMLGdCQUFjLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBO2FBQ3ZCO1FBQ0gsQ0FBQyxDQUFDLENBQUE7S0FDSDtJQUVELHdDQUF3QyxDQUFDLE9BQU8sQ0FBQyxDQUFBO0FBQ25ELENBQUM7QUFyQkQsc0VBcUJDO0FBRUQ7Ozs7R0FJRztBQUNILFNBQWdCLHdDQUF3QyxDQUFDLE9BQXlCO0lBQ2hGLGNBQWMsQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFBO0lBQ2hDLGNBQWMsQ0FBQyxLQUFLLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQTtBQUMxQyxDQUFDO0FBSEQsNEZBR0M7QUFFRCxTQUFnQiwwQkFBMEIsQ0FBQyxTQUFpQixFQUFFLGNBQThCO0lBQ2xGLElBQUEsS0FBSyxHQUFLLGNBQWMsTUFBbkIsQ0FBbUI7SUFDaEMsZ0ZBQWdGO0lBQ2hGLElBQU0sS0FBSyxHQUFHLEtBQUssYUFBTCxLQUFLLHVCQUFMLEtBQUssQ0FBRSxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQUMsS0FBSyxJQUFLLE9BQUEsS0FBSyxDQUFDLElBQUksS0FBSyxTQUFTLEVBQXhCLENBQXdCLENBQUMsQ0FBQTtJQUNyRSwyRUFBMkU7SUFDM0UseUNBQXlDO0lBQ3pDLElBQUksS0FBSyxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtRQUNyQyxjQUFjLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFBO0tBQy9DO0lBRUQsY0FBYyxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsR0FBRyxjQUFjLENBQUE7QUFDMUQsQ0FBQztBQVhELGdFQVdDIn0=