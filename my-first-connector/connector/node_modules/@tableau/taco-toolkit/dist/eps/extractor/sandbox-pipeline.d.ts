import { ConnectorPhase } from '../../shared/enums/connector-phase';
import { HandlerInput } from '../../shared/types/handler-input';
import { TempDataManager } from '../modules/temp-data-manager';
import { NetworkAdapter } from '../modules/network-adapter';
import ExtractorContext from './extractor-context';
export default class SandboxPipeline {
    private readonly extractorContext;
    private readonly handlerInput;
    private readonly handlers;
    private readonly sandboxVM;
    private storage;
    constructor(extractorContext: ExtractorContext, handlerInput: HandlerInput, tempDataManager: TempDataManager, networkAdapter: NetworkAdapter);
    private runPipelineForFileBasedData;
    private runPipelineForInMemoryData;
    private runDataGatheringPhase;
    private runAuthPhase;
    private executePipelineCode;
    runPhase(phase: ConnectorPhase): Promise<void>;
    private loadHandlers;
}
