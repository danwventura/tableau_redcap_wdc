"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isHandlerConfig = exports.resolveHandlers = void 0;
var change_case_1 = require("change-case");
var node_fs_1 = __importDefault(require("node:fs"));
var node_path_1 = __importDefault(require("node:path"));
var taco_file_parser_1 = require("../../shared/enums/taco-file-parser");
var type_utils_1 = require("../../shared/type-utils");
var eps_logger_1 = require("../logging/eps-logger");
var handlersMetadata = {
    auth: {
        required: false,
    },
    fetcher: {
        required: true,
    },
    parser: {
        required: true,
    },
};
/**
 * Resolve the handlerInput from the connector app into the addressable information.
 *
 * @param handlersDirPath the connection handler directory path
 * @param handlerInput the handlerInput object from the connector app. This is an untrusted input from userland.
 * @returns an object that contains resolved information of the handlers
 */
function resolveHandlers(handlersDirPath, handlerInput) {
    var handlers = {
        // currently, everything is using memory store
        storagePath: 'memory-store',
    };
    (0, type_utils_1.getTypedKeys)(handlersMetadata).forEach(function (handlerType) {
        var required = handlersMetadata[handlerType].required;
        var handlerName = handlerInput[handlerType];
        if (!handlerName) {
            if (required) {
                throw new Error("Required handlerInput property '".concat(handlerType, "' is not specified."));
            }
            else {
                // skip optional properties if not present
                return;
            }
        }
        if (typeof handlerName !== 'string') {
            throw new Error("The value of handlerInput property '".concat(handlerType, "' must be string"));
        }
        if (handlerType === 'parser' && (0, taco_file_parser_1.isTacoFileParserName)(handlerName)) {
            // if filename is a built-in taco file parser, just keep the original name
            handlers[handlerType] = handlerName;
        }
        else {
            handlers[handlerType] = {
                path: resolveHandlerFile(handlerName, handlerType, handlersDirPath),
                className: (0, change_case_1.pascalCase)(handlerName),
            };
        }
    });
    // At this point, all validations are done, and all required infos are resolved.
    return handlers;
}
exports.resolveHandlers = resolveHandlers;
function isHandlerConfig(parser) {
    return typeof parser === 'object' && 'path' in parser && 'className' in parser;
}
exports.isHandlerConfig = isHandlerConfig;
/**
 * Resolve custom handler name in handlerInput into a full file path.
 *
 * @param handlerName handler file name without extension
 * @param handlerType the type of handler to resolve -- for logging, etc.
 * @param handlersDirPath connector's unpack handlers folder with full path
 * @returns the full path of the file that will be used by the sandbox
 */
function resolveHandlerFile(handlerName, handlerType, handlersDirPath) {
    var filename = "".concat(handlerName, ".js");
    var customHandlerPath = node_path_1.default.join(handlersDirPath, filename);
    if (!node_fs_1.default.existsSync(customHandlerPath)) {
        eps_logger_1.Logger.error("CustomHandlerPath does not exist for ".concat(handlerType, ": ").concat(customHandlerPath));
        throw new Error("Could not find handler file '".concat(filename, "' based on property '").concat(handlerType, "': '").concat(handlerName, "'"));
    }
    return customHandlerPath;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFuZGxlci1yZXNvbHZlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9lcHMvZXh0cmFjdG9yL2hhbmRsZXItcmVzb2x2ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsMkNBQXdDO0FBQ3hDLG9EQUF3QjtBQUN4Qix3REFBNEI7QUFDNUIsd0VBQThGO0FBQzlGLHNEQUFzRDtBQUV0RCxvREFBOEM7QUFjOUMsSUFBTSxnQkFBZ0IsR0FBRztJQUN2QixJQUFJLEVBQUU7UUFDSixRQUFRLEVBQUUsS0FBSztLQUNoQjtJQUNELE9BQU8sRUFBRTtRQUNQLFFBQVEsRUFBRSxJQUFJO0tBQ2Y7SUFDRCxNQUFNLEVBQUU7UUFDTixRQUFRLEVBQUUsSUFBSTtLQUNmO0NBQ08sQ0FBQTtBQUlWOzs7Ozs7R0FNRztBQUNILFNBQWdCLGVBQWUsQ0FBQyxlQUF1QixFQUFFLFlBQW1DO0lBQzFGLElBQU0sUUFBUSxHQUFzQjtRQUNsQyw4Q0FBOEM7UUFDOUMsV0FBVyxFQUFFLGNBQWM7S0FDNUIsQ0FBQTtJQUVELElBQUEseUJBQVksRUFBQyxnQkFBZ0IsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFDLFdBQVc7UUFDekMsSUFBQSxRQUFRLEdBQUssZ0JBQWdCLENBQUMsV0FBVyxDQUFDLFNBQWxDLENBQWtDO1FBRWxELElBQU0sV0FBVyxHQUFHLFlBQVksQ0FBQyxXQUFXLENBQUMsQ0FBQTtRQUM3QyxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ2hCLElBQUksUUFBUSxFQUFFO2dCQUNaLE1BQU0sSUFBSSxLQUFLLENBQUMsMENBQW1DLFdBQVcsd0JBQXFCLENBQUMsQ0FBQTthQUNyRjtpQkFBTTtnQkFDTCwwQ0FBMEM7Z0JBQzFDLE9BQU07YUFDUDtTQUNGO1FBRUQsSUFBSSxPQUFPLFdBQVcsS0FBSyxRQUFRLEVBQUU7WUFDbkMsTUFBTSxJQUFJLEtBQUssQ0FBQyw4Q0FBdUMsV0FBVyxxQkFBa0IsQ0FBQyxDQUFBO1NBQ3RGO1FBRUQsSUFBSSxXQUFXLEtBQUssUUFBUSxJQUFJLElBQUEsdUNBQW9CLEVBQUMsV0FBVyxDQUFDLEVBQUU7WUFDakUsMEVBQTBFO1lBQzFFLFFBQVEsQ0FBQyxXQUFXLENBQUMsR0FBRyxXQUFXLENBQUE7U0FDcEM7YUFBTTtZQUNMLFFBQVEsQ0FBQyxXQUFXLENBQUMsR0FBRztnQkFDdEIsSUFBSSxFQUFFLGtCQUFrQixDQUFDLFdBQVcsRUFBRSxXQUFXLEVBQUUsZUFBZSxDQUFDO2dCQUNuRSxTQUFTLEVBQUUsSUFBQSx3QkFBVSxFQUFDLFdBQVcsQ0FBQzthQUNuQyxDQUFBO1NBQ0Y7SUFDSCxDQUFDLENBQUMsQ0FBQTtJQUVGLGdGQUFnRjtJQUNoRixPQUFPLFFBQW9CLENBQUE7QUFDN0IsQ0FBQztBQXBDRCwwQ0FvQ0M7QUFFRCxTQUFnQixlQUFlLENBQUMsTUFBMEI7SUFDeEQsT0FBTyxPQUFPLE1BQU0sS0FBSyxRQUFRLElBQUksTUFBTSxJQUFJLE1BQU0sSUFBSSxXQUFXLElBQUksTUFBTSxDQUFBO0FBQ2hGLENBQUM7QUFGRCwwQ0FFQztBQUVEOzs7Ozs7O0dBT0c7QUFDSCxTQUFTLGtCQUFrQixDQUFDLFdBQW1CLEVBQUUsV0FBd0IsRUFBRSxlQUF1QjtJQUNoRyxJQUFNLFFBQVEsR0FBRyxVQUFHLFdBQVcsUUFBSyxDQUFBO0lBQ3BDLElBQU0saUJBQWlCLEdBQUcsbUJBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFFLFFBQVEsQ0FBQyxDQUFBO0lBRTlELElBQUksQ0FBQyxpQkFBRSxDQUFDLFVBQVUsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFO1FBQ3JDLG1CQUFNLENBQUMsS0FBSyxDQUFDLCtDQUF3QyxXQUFXLGVBQUssaUJBQWlCLENBQUUsQ0FBQyxDQUFBO1FBQ3pGLE1BQU0sSUFBSSxLQUFLLENBQUMsdUNBQWdDLFFBQVEsa0NBQXdCLFdBQVcsaUJBQU8sV0FBVyxNQUFHLENBQUMsQ0FBQTtLQUNsSDtJQUNELE9BQU8saUJBQWlCLENBQUE7QUFDMUIsQ0FBQyJ9