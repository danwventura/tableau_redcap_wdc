"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sortColumnHeaderList = exports.getTableNames = void 0;
var express_1 = __importDefault(require("express"));
var node_http_1 = __importDefault(require("node:http"));
var extractor_cache_1 = __importDefault(require("./extractor-cache"));
var api_utils_1 = require("../utils/api-utils");
var eps_logger_1 = require("../logging/eps-logger");
var server_utils_1 = require("../utils/server-utils");
var base_taco_file_parser_1 = require("./handlers/taco-parser/base-taco-file-parser");
var eps_http_header_1 = require("../../shared/enums/eps-http-header");
var DEFAULT_ROW_COUNT = 100;
var ExtractorApi = /** @class */ (function () {
    function ExtractorApi(callerId, epsInstanceId, extractorId, connectionId, health, pipelineManager) {
        this.callerId = callerId;
        this.epsInstanceId = epsInstanceId;
        this.extractorId = extractorId;
        this.connectionId = connectionId;
        this.runDeferredPipelineMaybe = this.createRunDeferredPipelineMaybe(pipelineManager);
        this.app = (0, express_1.default)();
        this.interceptRequests(health);
        this.createGetTables();
        this.createGetMetadata();
        this.createHasMoreRows();
        this.createGetRowCount();
        this.createGetRows();
    }
    ExtractorApi.prototype.interceptRequests = function (health) {
        var _this = this;
        this.app.use((0, api_utils_1.getRequestLogger)(this.constructor.name));
        this.app.use(function (req, res, next) {
            var callerIdHeader = req.headers[eps_http_header_1.EpsHttpHeader.CallerId];
            if (callerIdHeader !== _this.callerId && callerIdHeader !== '0') {
                return (0, api_utils_1.sendBadRequest)(res, 'Missing or invalid caller-id in header');
            }
            var epsInstanceIdHeader = req.headers[eps_http_header_1.EpsHttpHeader.EpsInstanceId];
            if (epsInstanceIdHeader !== _this.epsInstanceId && epsInstanceIdHeader !== '0') {
                return (0, api_utils_1.sendBadRequest)(res, 'Missing eps-instance-id in header');
            }
            var connectionIdHeader = req.headers[eps_http_header_1.EpsHttpHeader.ConnectionId];
            if (connectionIdHeader !== _this.connectionId && connectionIdHeader !== '0') {
                return (0, api_utils_1.sendBadRequest)(res, 'Missing or invalid connection-id in header');
            }
            var extractorIdHeader = req.headers[eps_http_header_1.EpsHttpHeader.ExtractorId];
            if (extractorIdHeader !== _this.extractorId && extractorIdHeader !== '0') {
                return (0, api_utils_1.sendBadRequest)(res, 'Missing or invalid extractor-id in header');
            }
            return next();
        });
        this.app.use(function (req, res, next) {
            var errorMessage = health.errorMessage;
            if (errorMessage !== undefined) {
                (0, api_utils_1.sendBadRequest)(res, errorMessage);
                return;
            }
            return next();
        });
    };
    ExtractorApi.prototype.createRunDeferredPipelineMaybe = function (pipelineManager) {
        var _this = this;
        return function (tableName, caller) { return __awaiter(_this, void 0, void 0, function () {
            var table, properties, handlerInput, isDeferred;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        table = this.getTable(tableName);
                        if (!isDataTable(table) || !table.properties.handlerInput) {
                            return [2 /*return*/];
                        }
                        properties = table.properties;
                        handlerInput = properties.handlerInput;
                        isDeferred = properties.isDeferred;
                        if (!isDeferred) return [3 /*break*/, 3];
                        if (!
                        // TODO: for metadata, we still need to use the content as the indicator,
                        // until the connector has the capability to set the deferred phase.
                        // The condition is to prevent executing the deferred pipeline for metadata,
                        // if the columns are already populated for the table.
                        ((caller === 'metadata' && table.columns.length === 0) ||
                            (caller === 'rows' && !pipelineManager.isNamedPipelineComplete(tableName)))) 
                        // TODO: for metadata, we still need to use the content as the indicator,
                        // until the connector has the capability to set the deferred phase.
                        // The condition is to prevent executing the deferred pipeline for metadata,
                        // if the columns are already populated for the table.
                        return [3 /*break*/, 2];
                        return [4 /*yield*/, pipelineManager.runNamedPipeline(tableName, handlerInput)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [3 /*break*/, 5];
                    case 3:
                        if (!(table.columns.length === 0)) return [3 /*break*/, 5];
                        // s3 connector specific flow
                        return [4 /*yield*/, pipelineManager.runNamedPipeline(tableName, handlerInput)];
                    case 4:
                        // s3 connector specific flow
                        _a.sent();
                        _a.label = 5;
                    case 5: return [2 /*return*/];
                }
            });
        }); };
    };
    ExtractorApi.prototype.getTable = function (tableName) {
        var cache = extractor_cache_1.default.cache, fileParserMap = extractor_cache_1.default.fileParserMap;
        if (tableName in fileParserMap) {
            return fileParserMap[tableName];
        }
        if (!cache) {
            throw new Error('Cache is empty when calling getTable');
        }
        return cache.tables.find(function (t) { return t.name === tableName; });
    };
    ExtractorApi.prototype.getRowsFromFile = function (tableName, reset, count) {
        return __awaiter(this, void 0, void 0, function () {
            var fileParserMap, parser;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        fileParserMap = extractor_cache_1.default.fileParserMap;
                        if (!(tableName in fileParserMap)) return [3 /*break*/, 2];
                        parser = fileParserMap[tableName];
                        if (reset) {
                            parser.resetIndex();
                        }
                        return [4 /*yield*/, parser.getNextDataRows(count)];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    ExtractorApi.prototype.getRowsFromExtractorCache = function (tableName) {
        var context = extractor_cache_1.default.context;
        if (context.fetchState[tableName] === undefined) {
            context.fetchState[tableName] = {
                fetched: false,
                startOffset: 0,
            };
        }
        // Todo: Refactor
        // We fetch rows dynamically when isSplittingGatheringPhase===true
        // 	- We skip fetching rows if a table has been previously fetched
        //		- unless reset
        // IF we're not split, how do we reset?
        // if ((reset || !context.fetchState[tableName].fetched) && context.isSplittingGatheringPhase) {
        //   context.data = {
        //     tableName,
        //   }
        //   await extractor.runPhaseForPipelines(context, ConnectorPhase.DataGathering)
        // }
        var table = this.getTable(tableName);
        if (table === undefined) {
            return;
        }
        var rows = table.rows;
        context.fetchState[tableName].fetched = true;
        return rows;
    };
    ExtractorApi.prototype.createGetTables = function () {
        this.app.get('/tables', function (_req, res) {
            var fileParserMap = extractor_cache_1.default.fileParserMap, cache = extractor_cache_1.default.cache;
            var tables = getTableNames(cache, fileParserMap);
            if (tables.length === 0) {
                (0, api_utils_1.sendBadRequest)(res, 'Found 0 tables. There could be errors occured during data extraction or the connector never ingested any tables.');
                return;
            }
            res.send(tables);
        });
    };
    /**
      /tables/<name>/metadata?sort=original returns the original order of the columns from the source.
      /tables/<name>/metadata sorts column by id to work with a monolith dependency on sorted columns.
    */
    ExtractorApi.prototype.createGetMetadata = function () {
        var _this = this;
        this.app.get('/tables/:tableName/metadata', function (req, res) { return __awaiter(_this, void 0, void 0, function () {
            var tableName, table, columns, _a, returnObject, err_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 5, , 6]);
                        tableName = req.params.tableName;
                        return [4 /*yield*/, this.runDeferredPipelineMaybe(tableName, 'metadata')];
                    case 1:
                        _b.sent();
                        table = this.getTable(tableName);
                        if (table === undefined) {
                            (0, api_utils_1.sendNotFound)(res, "Table ".concat(tableName, " is not found."));
                            return [2 /*return*/];
                        }
                        if (!(table instanceof base_taco_file_parser_1.TacoFileParser)) return [3 /*break*/, 3];
                        return [4 /*yield*/, table.getColumnHeaders()];
                    case 2:
                        _a = _b.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        _a = __spreadArray([], __read(table.columns), false);
                        _b.label = 4;
                    case 4:
                        columns = _a;
                        if (req.query.sort !== 'original') {
                            sortColumnHeaderList(columns);
                        }
                        returnObject = {};
                        returnObject.columns = columns;
                        if (isDataTable(table)) {
                            if (table.properties.metadata && typeof table.properties.metadata === 'object') {
                                returnObject.metadata = __assign({}, table.properties.metadata);
                            }
                        }
                        res.send(returnObject);
                        return [3 /*break*/, 6];
                    case 5:
                        err_1 = _b.sent();
                        (0, api_utils_1.sendBadRequest)(res, err_1);
                        return [3 /*break*/, 6];
                    case 6: return [2 /*return*/];
                }
            });
        }); });
    };
    // /tables/name/rows?reset=true // default count: 100
    // /tables/name/rows?count=500&reset=true
    // /tables/name/rows?count=500
    // /tables/name/rows/preview?count=10
    ExtractorApi.prototype.createGetRows = function () {
        var _this = this;
        this.app.get('/tables/:tableName/rows/:preview?', function (req, res) { return __awaiter(_this, void 0, void 0, function () {
            var _a, tableName, preview, reset, count, fileParserMap, slicedRows, rows, rows, context, start, end, table, columns, _b, result, r, items, i, name_1, err_2;
            var _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _d.trys.push([0, 8, , 9]);
                        _a = req.params, tableName = _a.tableName, preview = _a.preview;
                        return [4 /*yield*/, this.runDeferredPipelineMaybe(tableName, 'rows')];
                    case 1:
                        _d.sent();
                        reset = req.query.reset;
                        count = req.query.count ? Number.parseInt(req.query.count) : DEFAULT_ROW_COUNT;
                        fileParserMap = extractor_cache_1.default.fileParserMap;
                        slicedRows = void 0;
                        if (!(tableName in fileParserMap)) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.getRowsFromFile(tableName, reset === 'true', count)];
                    case 2:
                        rows = _d.sent();
                        if (rows === undefined) {
                            (0, api_utils_1.sendNotFound)(res, "Table ".concat(tableName, " is not found."));
                            return [2 /*return*/];
                        }
                        slicedRows = rows;
                        return [3 /*break*/, 4];
                    case 3:
                        rows = this.getRowsFromExtractorCache(tableName);
                        if (rows === undefined) {
                            (0, api_utils_1.sendNotFound)(res, "Table ".concat(tableName, " is not found."));
                            return [2 /*return*/];
                        }
                        context = extractor_cache_1.default.context;
                        start = reset === 'true' ? 0 : ((_c = context.fetchState[tableName]) === null || _c === void 0 ? void 0 : _c.startOffset) || 0;
                        end = start + count;
                        slicedRows = rows.slice(start, end);
                        if ((preview === null || preview === void 0 ? void 0 : preview.toLowerCase()) !== 'preview') {
                            context.fetchState[tableName].startOffset = end;
                        }
                        _d.label = 4;
                    case 4:
                        table = this.getTable(tableName);
                        if (table === undefined) {
                            (0, api_utils_1.sendNotFound)(res, "Table ".concat(tableName, " is not found."));
                            return [2 /*return*/];
                        }
                        if (!(table instanceof base_taco_file_parser_1.TacoFileParser)) return [3 /*break*/, 6];
                        return [4 /*yield*/, table.getColumnHeaders()];
                    case 5:
                        _b = _d.sent();
                        return [3 /*break*/, 7];
                    case 6:
                        _b = __spreadArray([], __read(table.columns), false);
                        _d.label = 7;
                    case 7:
                        columns = _b;
                        sortColumnHeaderList(columns);
                        result = [];
                        for (r = 0; r < slicedRows.length; r++) {
                            items = [];
                            for (i = 0; i < columns.length; i++) {
                                name_1 = columns[i].id;
                                items.push(slicedRows[r][name_1]);
                            }
                            result.push(items);
                        }
                        res.send(result);
                        return [3 /*break*/, 9];
                    case 8:
                        err_2 = _d.sent();
                        (0, api_utils_1.sendBadRequest)(res, err_2);
                        return [3 /*break*/, 9];
                    case 9: return [2 /*return*/];
                }
            });
        }); });
    };
    ExtractorApi.prototype.createHasMoreRows = function () {
        var _this = this;
        this.app.get('/tables/:tableName/rows/status', function (req, res) { return __awaiter(_this, void 0, void 0, function () {
            var hasMoreTuples, tableName, fileParserMap, rows, context, err_3;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 5, , 6]);
                        hasMoreTuples = 0;
                        tableName = req.params.tableName;
                        return [4 /*yield*/, this.runDeferredPipelineMaybe(tableName, 'rows')];
                    case 1:
                        _b.sent();
                        fileParserMap = extractor_cache_1.default.fileParserMap;
                        if (!(tableName in fileParserMap)) return [3 /*break*/, 2];
                        hasMoreTuples = fileParserMap[tableName].hasNextRow() ? 1 : 0;
                        return [3 /*break*/, 4];
                    case 2: return [4 /*yield*/, this.getRowsFromExtractorCache(tableName)];
                    case 3:
                        rows = _b.sent();
                        if (rows === undefined) {
                            (0, api_utils_1.sendNotFound)(res, "Table ".concat(tableName, " is not found."));
                            return [2 /*return*/];
                        }
                        context = extractor_cache_1.default.context;
                        hasMoreTuples = ((_a = context.fetchState[tableName].startOffset) !== null && _a !== void 0 ? _a : 0) < rows.length ? 1 : 0;
                        _b.label = 4;
                    case 4:
                        res.send({
                            hasMoreTuples: hasMoreTuples,
                        });
                        return [3 /*break*/, 6];
                    case 5:
                        err_3 = _b.sent();
                        (0, api_utils_1.sendBadRequest)(res, err_3);
                        return [3 /*break*/, 6];
                    case 6: return [2 /*return*/];
                }
            });
        }); });
    };
    ExtractorApi.prototype.createGetRowCount = function () {
        var _this = this;
        this.app.get('/tables/:tableName/rows/count', function (req, res) { return __awaiter(_this, void 0, void 0, function () {
            var tableName, fileParserMap, rowCount, rows, err_4;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 6, , 7]);
                        tableName = req.params.tableName;
                        fileParserMap = extractor_cache_1.default.fileParserMap;
                        rowCount = void 0;
                        if (!(fileParserMap[tableName] instanceof base_taco_file_parser_1.TacoFileParser)) return [3 /*break*/, 2];
                        return [4 /*yield*/, fileParserMap[tableName].getRowCount()];
                    case 1:
                        rowCount = _a.sent();
                        return [3 /*break*/, 5];
                    case 2: return [4 /*yield*/, this.runDeferredPipelineMaybe(tableName, 'rows')];
                    case 3:
                        _a.sent();
                        return [4 /*yield*/, this.getRowsFromExtractorCache(tableName)];
                    case 4:
                        rows = _a.sent();
                        if (rows === undefined) {
                            (0, api_utils_1.sendNotFound)(res, "Table ".concat(tableName, " is not found."));
                            return [2 /*return*/];
                        }
                        rowCount = rows.length;
                        _a.label = 5;
                    case 5:
                        res.send({ count: rowCount });
                        return [3 /*break*/, 7];
                    case 6:
                        err_4 = _a.sent();
                        (0, api_utils_1.sendBadRequest)(res, err_4);
                        return [3 /*break*/, 7];
                    case 7: return [2 /*return*/];
                }
            });
        }); });
    };
    /** Starts extractor HTTP server */
    ExtractorApi.prototype.start = function (port) {
        return __awaiter(this, void 0, void 0, function () {
            var server, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        server = node_http_1.default.createServer(this.app);
                        return [4 /*yield*/, (0, server_utils_1.startHttpServer)(server, port)];
                    case 1:
                        _a.sent();
                        eps_logger_1.Logger.info("Running Extractor on port ".concat(port, " under process ").concat(process.pid));
                        return [3 /*break*/, 3];
                    case 2:
                        error_1 = _a.sent();
                        error_1.message = "Failed to start extractor API on port ".concat(port, ". ").concat(error_1.message);
                        throw error_1;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    return ExtractorApi;
}());
exports.default = ExtractorApi;
/**
 * A function to narrow down the type for the value returned from ExtractorApi.getTable
 */
function isDataTable(table) {
    return table !== undefined && !(table instanceof base_taco_file_parser_1.TacoFileParser);
}
/**
 * Compose table name list based on dataContainer (cache) and fileParserMap in the ExtractorContext
 */
function getTableNames(dataContainer, fileParserMap) {
    var tableNameSet = new Set();
    if (dataContainer) {
        dataContainer.tables.forEach(function (table) { return tableNameSet.add(table.name); });
    }
    // For file-based handler input, table names are added to the fileParserMap
    Object.keys(fileParserMap).forEach(function (tableName) { return tableNameSet.add(tableName); });
    return Array.from(tableNameSet);
}
exports.getTableNames = getTableNames;
/**
 * Sort the given column header array into unicode order. The sorted result is
 * the columns order that extractor API responses (when 'original' param is not present).
 * Tableau monolith expects EPS to send the column header in a particular order.
 * Based on the observation, sorting by unicode order works properly.
 *
 * Note the function mutates the original input array.
 */
function sortColumnHeaderList(columns) {
    columns.sort(function (a, b) {
        var idA = a.id;
        var idB = b.id;
        // For JS string comparison operators, refer to https://javascript.info/comparison#string-comparison
        if (idA < idB) {
            return -1;
        }
        if (idA > idB) {
            return 1;
        }
        return 0;
    });
}
exports.sortColumnHeaderList = sortColumnHeaderList;
//# sourceMappingURL=data:application/json;base64,