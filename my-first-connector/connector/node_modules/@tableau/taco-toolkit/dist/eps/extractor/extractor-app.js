"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExtractorApp = void 0;
var eps_logger_1 = require("../logging/eps-logger");
var port_manager_1 = require("../modules/port-manager");
var eps_process_types_1 = require("../types/eps-process-types");
var extractor_status_1 = require("../types/extractor-status");
var extractor_1 = __importDefault(require("./extractor"));
var extractor_app_config_1 = require("./extractor-app-config");
var extractor_message_1 = require("./extractor-message");
var ExtractorApp = /** @class */ (function () {
    function ExtractorApp(options) {
        this.extractor = new extractor_1.default(options.extractorId, options.extractorOptions, options.epsInstanceId, options.callerId, options.epsTempDirPath, options.networkAdapterOptions);
    }
    ExtractorApp.prototype.start = function (portConfig) {
        var portRange = portConfig.portRange, reservedPorts = portConfig.reservedPorts;
        var portManager = new port_manager_1.PortManager(portRange[0], portRange[1], reservedPorts);
        return this.extractor.start(portManager);
    };
    return ExtractorApp;
}());
exports.ExtractorApp = ExtractorApp;
if (require.main === module) {
    // Listen for the uncaughtException event to report the error to EPS,
    // so that EPS may handle extractor crash properly and log the error.
    // Any module imported in this file should avoid potential error during eval,
    // otherwise, the error will not be reported to EPS.
    process.on('uncaughtException', function (e) {
        (0, extractor_message_1.sendExtractorMessage)({
            status: extractor_status_1.ExtractorStatus.ExtractorError,
            errorMessage: String(e),
        });
        // Note: uncaughtException is normally fatal to the process, so please do NOT
        // try to recover anything in the handler code.
        throw e;
    });
    var _a = (0, extractor_app_config_1.getExtractorAppConfig)(), epsInstanceId = _a.epsInstanceId, extractorId = _a.extractorId, callerId = _a.callerId, logOption = _a.logOption, extractorOptions = _a.extractorOptions, epsTempDirPath = _a.epsTempDirPath, networkAdapterOptions = _a.networkAdapterOptions, portConfig = _a.portConfig;
    process.title = "".concat(eps_process_types_1.EPSProcessName.EPSExtractor, "-").concat(extractorId);
    var loggerConfig = (0, eps_logger_1.createLoggerConfig)("Extractor.".concat(extractorId), logOption);
    eps_logger_1.Logger.init(epsInstanceId, loggerConfig);
    eps_logger_1.Logger.debug("Initiating ".concat(ExtractorApp.name));
    var extractorApp = new ExtractorApp({
        epsInstanceId: epsInstanceId,
        callerId: callerId,
        extractorId: extractorId,
        extractorOptions: extractorOptions,
        epsTempDirPath: epsTempDirPath,
        networkAdapterOptions: networkAdapterOptions,
    });
    // TODO: today, EPS always forcely kills the extractors. By default, we should
    // let extractor exits gracefully.
    extractorApp.start(portConfig).catch(function (error) {
        eps_logger_1.Logger.error(error);
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXh0cmFjdG9yLWFwcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9lcHMvZXh0cmFjdG9yL2V4dHJhY3Rvci1hcHAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsb0RBQWtFO0FBRWxFLHdEQUFxRDtBQUNyRCxnRUFBMkQ7QUFFM0QsOERBQTJEO0FBQzNELDBEQUFtQztBQUNuQywrREFBOEQ7QUFDOUQseURBQTBEO0FBVzFEO0lBR0Usc0JBQVksT0FBNEI7UUFDdEMsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLG1CQUFTLENBQzVCLE9BQU8sQ0FBQyxXQUFXLEVBQ25CLE9BQU8sQ0FBQyxnQkFBZ0IsRUFDeEIsT0FBTyxDQUFDLGFBQWEsRUFDckIsT0FBTyxDQUFDLFFBQVEsRUFDaEIsT0FBTyxDQUFDLGNBQWMsRUFDdEIsT0FBTyxDQUFDLHFCQUFxQixDQUM5QixDQUFBO0lBQ0gsQ0FBQztJQUVELDRCQUFLLEdBQUwsVUFBTSxVQUErQjtRQUMzQixJQUFBLFNBQVMsR0FBb0IsVUFBVSxVQUE5QixFQUFFLGFBQWEsR0FBSyxVQUFVLGNBQWYsQ0FBZTtRQUUvQyxJQUFNLFdBQVcsR0FBRyxJQUFJLDBCQUFXLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxhQUFhLENBQUMsQ0FBQTtRQUM5RSxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFBO0lBQzFDLENBQUM7SUFDSCxtQkFBQztBQUFELENBQUMsQUFwQkQsSUFvQkM7QUFwQlksb0NBQVk7QUFzQnpCLElBQUksT0FBTyxDQUFDLElBQUksS0FBSyxNQUFNLEVBQUU7SUFDM0IscUVBQXFFO0lBQ3JFLHFFQUFxRTtJQUNyRSw2RUFBNkU7SUFDN0Usb0RBQW9EO0lBQ3BELE9BQU8sQ0FBQyxFQUFFLENBQUMsbUJBQW1CLEVBQUUsVUFBQyxDQUFDO1FBQ2hDLElBQUEsd0NBQW9CLEVBQUM7WUFDbkIsTUFBTSxFQUFFLGtDQUFlLENBQUMsY0FBYztZQUN0QyxZQUFZLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQztTQUN4QixDQUFDLENBQUE7UUFFRiw2RUFBNkU7UUFDN0UsK0NBQStDO1FBQy9DLE1BQU0sQ0FBQyxDQUFBO0lBQ1QsQ0FBQyxDQUFDLENBQUE7SUFFSSxJQUFBLEtBU0YsSUFBQSw0Q0FBcUIsR0FBRSxFQVJ6QixhQUFhLG1CQUFBLEVBQ2IsV0FBVyxpQkFBQSxFQUNYLFFBQVEsY0FBQSxFQUNSLFNBQVMsZUFBQSxFQUNULGdCQUFnQixzQkFBQSxFQUNoQixjQUFjLG9CQUFBLEVBQ2QscUJBQXFCLDJCQUFBLEVBQ3JCLFVBQVUsZ0JBQ2UsQ0FBQTtJQUUzQixPQUFPLENBQUMsS0FBSyxHQUFHLFVBQUcsa0NBQWMsQ0FBQyxZQUFZLGNBQUksV0FBVyxDQUFFLENBQUE7SUFFL0QsSUFBTSxZQUFZLEdBQUcsSUFBQSwrQkFBa0IsRUFBQyxvQkFBYSxXQUFXLENBQUUsRUFBRSxTQUFTLENBQUMsQ0FBQTtJQUM5RSxtQkFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsWUFBWSxDQUFDLENBQUE7SUFFeEMsbUJBQU0sQ0FBQyxLQUFLLENBQUMscUJBQWMsWUFBWSxDQUFDLElBQUksQ0FBRSxDQUFDLENBQUE7SUFFL0MsSUFBTSxZQUFZLEdBQUcsSUFBSSxZQUFZLENBQUM7UUFDcEMsYUFBYSxlQUFBO1FBQ2IsUUFBUSxVQUFBO1FBQ1IsV0FBVyxhQUFBO1FBQ1gsZ0JBQWdCLGtCQUFBO1FBQ2hCLGNBQWMsZ0JBQUE7UUFDZCxxQkFBcUIsdUJBQUE7S0FDdEIsQ0FBQyxDQUFBO0lBRUYsOEVBQThFO0lBQzlFLGtDQUFrQztJQUNsQyxZQUFZLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxVQUFDLEtBQUs7UUFDekMsbUJBQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUE7SUFDckIsQ0FBQyxDQUFDLENBQUE7Q0FDSCJ9