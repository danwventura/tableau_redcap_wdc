"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.unpackTaco = void 0;
var path_1 = __importDefault(require("path"));
var adm_zip_1 = __importDefault(require("adm-zip"));
var constants_1 = require("../utils/constants");
var logging_1 = require("../utils/logging");
function unpackTaco(config, state) {
    var spinner = state.spinner;
    var sourceFile = config.tacoName, destPath = config.destPath;
    spinner.start("Start unpacking connector ".concat(sourceFile, "..."));
    // taco filename without extension
    var connectorName = path_1.default.parse(sourceFile).name;
    var currentPath = process.cwd();
    var destFolderName = path_1.default.resolve(currentPath, destPath, connectorName);
    var sourceFilePath = path_1.default.resolve(currentPath, sourceFile);
    // TODO: if destFolderName is already existed, we should confirm to overwrite
    try {
        var zip = new adm_zip_1.default(sourceFilePath);
        zip.extractAllTo(destFolderName, true);
        spinner.success("Successfully unpacked the taco connector '".concat(sourceFile, "'"));
        logging_1.logger.info("Unpacked taco connector at: ".concat(destFolderName));
    }
    catch (err) {
        spinner.fail("Failed to unpack taco connector '".concat(sourceFile, "'"));
        logging_1.logger.error("Failed to unpack taco connector '".concat(sourceFile, " into '").concat(destFolderName, "'.\nCaused by: ").concat(err));
        process.exit(constants_1.TACO_COMMAND_ERROR_EXIT_CODE);
    }
}
exports.unpackTaco = unpackTaco;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5wYWNrLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NsaS90YWNvLWNvbW1hbmRzL3VucGFjay91bnBhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsOENBQXVCO0FBQ3ZCLG9EQUE0QjtBQUc1QixnREFBaUU7QUFDakUsNENBQXlDO0FBT3pDLFNBQWdCLFVBQVUsQ0FBQyxNQUFvQixFQUFFLEtBQXFCO0lBQzVELElBQUEsT0FBTyxHQUFLLEtBQUssUUFBVixDQUFVO0lBQ2pCLElBQVUsVUFBVSxHQUFlLE1BQU0sU0FBckIsRUFBRSxRQUFRLEdBQUssTUFBTSxTQUFYLENBQVc7SUFFakQsT0FBTyxDQUFDLEtBQUssQ0FBQyxvQ0FBNkIsVUFBVSxRQUFLLENBQUMsQ0FBQTtJQUUzRCxrQ0FBa0M7SUFDbEMsSUFBTSxhQUFhLEdBQUcsY0FBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUE7SUFDakQsSUFBTSxXQUFXLEdBQUcsT0FBTyxDQUFDLEdBQUcsRUFBRSxDQUFBO0lBQ2pDLElBQU0sY0FBYyxHQUFHLGNBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLFFBQVEsRUFBRSxhQUFhLENBQUMsQ0FBQTtJQUN6RSxJQUFNLGNBQWMsR0FBRyxjQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxVQUFVLENBQUMsQ0FBQTtJQUU1RCw2RUFBNkU7SUFFN0UsSUFBSTtRQUNGLElBQU0sR0FBRyxHQUFHLElBQUksaUJBQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQTtRQUN0QyxHQUFHLENBQUMsWUFBWSxDQUFDLGNBQWMsRUFBRSxJQUFJLENBQUMsQ0FBQTtRQUN0QyxPQUFPLENBQUMsT0FBTyxDQUFDLG9EQUE2QyxVQUFVLE1BQUcsQ0FBQyxDQUFBO1FBQzNFLGdCQUFNLENBQUMsSUFBSSxDQUFDLHNDQUErQixjQUFjLENBQUUsQ0FBQyxDQUFBO0tBQzdEO0lBQUMsT0FBTyxHQUFHLEVBQUU7UUFDWixPQUFPLENBQUMsSUFBSSxDQUFDLDJDQUFvQyxVQUFVLE1BQUcsQ0FBQyxDQUFBO1FBRS9ELGdCQUFNLENBQUMsS0FBSyxDQUNWLDJDQUFvQyxVQUFVLG9CQUFVLGNBQWMsNEJBQWtCLEdBQUcsQ0FBRSxDQUM5RixDQUFBO1FBQ0QsT0FBTyxDQUFDLElBQUksQ0FBQyx3Q0FBNEIsQ0FBQyxDQUFBO0tBQzNDO0FBQ0gsQ0FBQztBQTNCRCxnQ0EyQkMifQ==