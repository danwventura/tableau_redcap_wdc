"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.logFatalError = exports.initLogger = exports.logger = exports.getLogPath = exports.cliLogLevel = exports.LOG_FILENAME = void 0;
var path_1 = __importDefault(require("path"));
var log_level_1 = require("../../../shared/logger/log-level");
var logger_1 = require("../../../shared/logger/logger");
var nodejs_serializer_1 = require("../../../shared/logger/serializer/nodejs-serializer");
var file_1 = require("../../../shared/logger/writer/file");
var nodejs_console_1 = require("../../../shared/logger/writer/nodejs-console");
exports.LOG_FILENAME = 'cli';
exports.cliLogLevel = {
    debug: log_level_1.LogLevel.DEBUG,
    info: log_level_1.LogLevel.INFO,
};
function getLogLevelFromString(str) {
    return exports.cliLogLevel[str];
}
function getLogPath(tacoRootPath) {
    return path_1.default.join(tacoRootPath, 'log');
}
exports.getLogPath = getLogPath;
exports.logger = new logger_1.Logger({
    writers: [],
    serializer: nodejs_serializer_1.serialize,
});
function initLogger(config) {
    var verbose = config.verbose;
    exports.logger.addWriter(new nodejs_console_1.NodeJsConsoleWriter({
        level: verbose ? log_level_1.LogLevel.DEBUG : log_level_1.LogLevel.INFO,
    }));
    if (isFileLoggerConfig(config)) {
        var fileLogLevel = config.fileLogLevel, fileLogDirPath = config.fileLogDirPath;
        exports.logger.addWriter(new file_1.FileWriter({
            filename: exports.LOG_FILENAME,
            sourceName: 'CLI',
            level: fileLogLevel ? getLogLevelFromString(fileLogLevel) : log_level_1.LogLevel.DEBUG,
            dirPath: fileLogDirPath,
        }));
    }
}
exports.initLogger = initLogger;
function logFatalError(fatalError) {
    var statusCode = fatalError.statusCode, errorCode = fatalError.errorCode, errorSource = fatalError.errorSource, message = fatalError.message, error = fatalError.error;
    var errorMsg = "\n[Status Code] ".concat(statusCode, "\n[Error Source] ").concat(errorSource, "\n[EPS Error Code] ").concat(errorCode, "\n[Error Message] ").concat(message, "\n");
    exports.logger.error(errorMsg);
    if (error instanceof Error) {
        exports.logger.error("Stacktrace: ".concat(error.stack));
    }
}
exports.logFatalError = logFatalError;
function isFileLoggerConfig(config) {
    return 'fileLogDirPath' in config;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2luZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jbGkvdGFjby1jb21tYW5kcy91dGlscy9sb2dnaW5nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLDhDQUF1QjtBQUt2Qiw4REFBMkQ7QUFDM0Qsd0RBQXNEO0FBQ3RELHlGQUErRTtBQUMvRSwyREFBK0Q7QUFDL0QsK0VBQWtGO0FBRXJFLFFBQUEsWUFBWSxHQUFHLEtBQUssQ0FBQTtBQXFCcEIsUUFBQSxXQUFXLEdBQUc7SUFDekIsS0FBSyxFQUFFLG9CQUFRLENBQUMsS0FBSztJQUNyQixJQUFJLEVBQUUsb0JBQVEsQ0FBQyxJQUFJO0NBQ1gsQ0FBQTtBQUlWLFNBQVMscUJBQXFCLENBQUMsR0FBb0I7SUFDakQsT0FBTyxtQkFBVyxDQUFDLEdBQUcsQ0FBQyxDQUFBO0FBQ3pCLENBQUM7QUFFRCxTQUFnQixVQUFVLENBQUMsWUFBb0I7SUFDN0MsT0FBTyxjQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxLQUFLLENBQUMsQ0FBQTtBQUN2QyxDQUFDO0FBRkQsZ0NBRUM7QUFFWSxRQUFBLE1BQU0sR0FBRyxJQUFJLGVBQU0sQ0FBQztJQUMvQixPQUFPLEVBQUUsRUFBRTtJQUNYLFVBQVUsRUFBRSw2QkFBUztDQUN0QixDQUFDLENBQUE7QUFFRixTQUFnQixVQUFVLENBQUMsTUFBdUI7SUFDeEMsSUFBQSxPQUFPLEdBQUssTUFBTSxRQUFYLENBQVc7SUFFMUIsY0FBTSxDQUFDLFNBQVMsQ0FDZCxJQUFJLG9DQUFtQixDQUFDO1FBQ3RCLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLG9CQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxvQkFBUSxDQUFDLElBQUk7S0FDaEQsQ0FBQyxDQUNILENBQUE7SUFFRCxJQUFJLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxFQUFFO1FBQ3RCLElBQUEsWUFBWSxHQUFxQixNQUFNLGFBQTNCLEVBQUUsY0FBYyxHQUFLLE1BQU0sZUFBWCxDQUFXO1FBQy9DLGNBQU0sQ0FBQyxTQUFTLENBQ2QsSUFBSSxpQkFBVSxDQUFDO1lBQ2IsUUFBUSxFQUFFLG9CQUFZO1lBQ3RCLFVBQVUsRUFBRSxLQUFLO1lBQ2pCLEtBQUssRUFBRSxZQUFZLENBQUMsQ0FBQyxDQUFDLHFCQUFxQixDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxvQkFBUSxDQUFDLEtBQUs7WUFDMUUsT0FBTyxFQUFFLGNBQWM7U0FDeEIsQ0FBQyxDQUNILENBQUE7S0FDRjtBQUNILENBQUM7QUFwQkQsZ0NBb0JDO0FBRUQsU0FBZ0IsYUFBYSxDQUFDLFVBQXNCO0lBQzFDLElBQUEsVUFBVSxHQUE2QyxVQUFVLFdBQXZELEVBQUUsU0FBUyxHQUFrQyxVQUFVLFVBQTVDLEVBQUUsV0FBVyxHQUFxQixVQUFVLFlBQS9CLEVBQUUsT0FBTyxHQUFZLFVBQVUsUUFBdEIsRUFBRSxLQUFLLEdBQUssVUFBVSxNQUFmLENBQWU7SUFFekUsSUFBTSxRQUFRLEdBQUcsMEJBQW1CLFVBQVUsOEJBQW9CLFdBQVcsZ0NBQXNCLFNBQVMsK0JBQXFCLE9BQU8sT0FBSSxDQUFBO0lBRTVJLGNBQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUE7SUFFdEIsSUFBSSxLQUFLLFlBQVksS0FBSyxFQUFFO1FBQzFCLGNBQU0sQ0FBQyxLQUFLLENBQUMsc0JBQWUsS0FBSyxDQUFDLEtBQUssQ0FBRSxDQUFDLENBQUE7S0FDM0M7QUFDSCxDQUFDO0FBVkQsc0NBVUM7QUFFRCxTQUFTLGtCQUFrQixDQUFDLE1BQXVCO0lBQ2pELE9BQU8sZ0JBQWdCLElBQUksTUFBTSxDQUFBO0FBQ25DLENBQUMifQ==