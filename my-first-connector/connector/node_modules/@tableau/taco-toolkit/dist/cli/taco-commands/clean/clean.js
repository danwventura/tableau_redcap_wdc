"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.cleanPackagesAndTacoFiles = exports.cleanTaco = void 0;
var fs_1 = __importDefault(require("fs"));
var path_1 = __importDefault(require("path"));
var status_code_1 = require("../../../shared/errors/status-code");
var error_source_1 = require("../../../shared/errors/error-source");
var error_codes_1 = require("../../../shared/errors/error-codes");
var command_1 = require("../../taco-commands/utils/command");
var constants_1 = require("../../taco-commands/utils/constants");
var logging_1 = require("../../taco-commands/utils/logging");
var npm_command_1 = require("../utils/npm-command");
var connector_1 = require("../utils/connector");
var clean_1 = require("../../taco-scripts/clean/clean");
var NODE_MODULES_PATH = path_1.default.join('connector', 'node_modules');
var OPTIONAL_CLEAN_ITEMS = [
    'connection-fields.xml',
    'connection-metadata.xml',
    'manifest.xml',
    'oauth-config.xml',
];
function cleanTaco(config, state) {
    return __awaiter(this, void 0, void 0, function () {
        var spinner, verbose, tacoRootPath, params, result, error, _a, removedPaths, failures;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    spinner = state.spinner, verbose = state.verbose;
                    tacoRootPath = config.tacoRootPath;
                    if (!(0, connector_1.isOldDependencySetup)(tacoRootPath)) return [3 /*break*/, 2];
                    // TODO: temporarily calling the underlying functionality directly for existing usages.
                    // Let's remove the if once all existing usages are migrated.
                    return [4 /*yield*/, (0, clean_1.cleanConnector)(tacoRootPath, state)];
                case 1:
                    // TODO: temporarily calling the underlying functionality directly for existing usages.
                    // Let's remove the if once all existing usages are migrated.
                    _b.sent();
                    return [3 /*break*/, 3];
                case 2:
                    params = getCleanScriptParams(verbose);
                    result = (0, npm_command_1.executeNpmCmd)(params, {
                        cwd: (0, connector_1.getConnectorFolderPath)(tacoRootPath),
                        stdio: 'inherit',
                    });
                    if ((0, command_1.isErrorResult)(result)) {
                        error = result.error.error;
                        (0, logging_1.logFatalError)({
                            statusCode: status_code_1.StatusCode.Cancelled,
                            errorSource: error_source_1.ErrorSources.System,
                            errorCode: error_codes_1.ErrorCodes.G0LV97J0,
                            message: 'Failed to clean connector artifacts',
                            error: error,
                        });
                        process.exit(constants_1.TACO_COMMAND_ERROR_EXIT_CODE);
                    }
                    _b.label = 3;
                case 3: return [4 /*yield*/, cleanPackagesAndTacoFiles(config)];
                case 4:
                    _a = _b.sent(), removedPaths = _a.removedPaths, failures = _a.failures;
                    logging_1.logger.debug("Removed:\n".concat(removedPaths.join(',\n')));
                    if (failures.length > 0) {
                        spinner.fail('Failed to remove dependency packages or taco configuration files');
                        (0, logging_1.logFatalError)({
                            statusCode: status_code_1.StatusCode.Cancelled,
                            errorSource: error_source_1.ErrorSources.System,
                            errorCode: error_codes_1.ErrorCodes.PGP0LOLF,
                            message: "Unable to remove the files: ".concat(JSON.stringify(failures)),
                        });
                        process.exit(constants_1.TACO_COMMAND_ERROR_EXIT_CODE);
                    }
                    spinner.success('Clean succeeded!');
                    return [2 /*return*/];
            }
        });
    });
}
exports.cleanTaco = cleanTaco;
function cleanPackagesAndTacoFiles(config) {
    return __awaiter(this, void 0, void 0, function () {
        var cleanLog, cleanOptional, tacoRootPath, cleanPaths, results, failures, removed;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    cleanLog = config.cleanLog, cleanOptional = config.cleanOptional, tacoRootPath = config.tacoRootPath;
                    cleanPaths = [path_1.default.resolve(tacoRootPath, NODE_MODULES_PATH)];
                    if (cleanOptional) {
                        cleanPaths.push.apply(cleanPaths, __spreadArray([], __read(OPTIONAL_CLEAN_ITEMS.map(function (item) {
                            return path_1.default.resolve(tacoRootPath, item);
                        })), false));
                    }
                    if (cleanLog) {
                        cleanPaths.push((0, logging_1.getLogPath)(tacoRootPath));
                    }
                    return [4 /*yield*/, Promise.allSettled(cleanPaths.map(function (cleanPath) {
                            return fs_1.default.promises.rm(cleanPath, {
                                recursive: true,
                                force: true,
                                maxRetries: 1,
                            });
                        }))];
                case 1:
                    results = _a.sent();
                    failures = [];
                    removed = [];
                    results.forEach(function (result, index) {
                        var cleanPath = cleanPaths[index];
                        if (result.status === 'rejected') {
                            failures.push({
                                path: cleanPath,
                                reason: result.reason,
                            });
                        }
                        else {
                            removed.push(cleanPath);
                        }
                    });
                    return [2 /*return*/, {
                            failures: failures,
                            removedPaths: removed,
                        }];
            }
        });
    });
}
exports.cleanPackagesAndTacoFiles = cleanPackagesAndTacoFiles;
function getCleanScriptParams(verbose) {
    var params = ['run', 'clean'];
    if (verbose) {
        params.push('--', '--verbose');
    }
    return params;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xlYW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY2xpL3RhY28tY29tbWFuZHMvY2xlYW4vY2xlYW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLDBDQUFtQjtBQUNuQiw4Q0FBdUI7QUFFdkIsa0VBQStEO0FBQy9ELG9FQUFrRTtBQUNsRSxrRUFBK0Q7QUFDL0QsNkRBQWlGO0FBQ2pGLGlFQUFrRjtBQUNsRiw2REFBcUY7QUFDckYsb0RBQW9EO0FBQ3BELGdEQUFpRjtBQUNqRix3REFBK0Q7QUFFL0QsSUFBTSxpQkFBaUIsR0FBRyxjQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxjQUFjLENBQUMsQ0FBQTtBQUVoRSxJQUFNLG9CQUFvQixHQUFHO0lBQzNCLHVCQUF1QjtJQUN2Qix5QkFBeUI7SUFDekIsY0FBYztJQUNkLGtCQUFrQjtDQUNWLENBQUE7QUFhVixTQUFzQixTQUFTLENBQUMsTUFBbUIsRUFBRSxLQUFxQjs7Ozs7O29CQUNoRSxPQUFPLEdBQWMsS0FBSyxRQUFuQixFQUFFLE9BQU8sR0FBSyxLQUFLLFFBQVYsQ0FBVTtvQkFDMUIsWUFBWSxHQUFLLE1BQU0sYUFBWCxDQUFXO3lCQUUzQixJQUFBLGdDQUFvQixFQUFDLFlBQVksQ0FBQyxFQUFsQyx3QkFBa0M7b0JBQ3BDLHVGQUF1RjtvQkFDdkYsNkRBQTZEO29CQUM3RCxxQkFBTSxJQUFBLHNCQUFjLEVBQUMsWUFBWSxFQUFFLEtBQUssQ0FBQyxFQUFBOztvQkFGekMsdUZBQXVGO29CQUN2Riw2REFBNkQ7b0JBQzdELFNBQXlDLENBQUE7OztvQkFHbkMsTUFBTSxHQUFHLG9CQUFvQixDQUFDLE9BQU8sQ0FBQyxDQUFBO29CQUN0QyxNQUFNLEdBQUcsSUFBQSwyQkFBYSxFQUFDLE1BQU0sRUFBRTt3QkFDbkMsR0FB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