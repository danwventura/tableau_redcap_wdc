"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isErrorResult = exports.isSuccessResult = exports.executeCmd = exports.exitIfAnyMissingPath = exports.exitIfPathExists = exports.exitIfNonExistPath = exports.resolvePath = void 0;
var child_process_1 = require("child_process");
var fs_1 = __importDefault(require("fs"));
var path_1 = __importDefault(require("path"));
var console_1 = require("./console");
var logging_1 = require("./logging");
/**
 * If the input path is a relative path, it resolves the path from
 * current working directory.
 *
 * @returns an absolute path
 */
function resolvePath(rootPath) {
    if (path_1.default.isAbsolute(rootPath)) {
        return rootPath;
    }
    return path_1.default.resolve(process.cwd(), rootPath);
}
exports.resolvePath = resolvePath;
/**
 * The function is designated to valid if a path from user input exists.
 * Note: this function only displays messages in console.
 * It does not log any info into file.
 *
 * @param filePath a relative path will be resolved relative to the current working directory
 * @param errorMessage error message to display before exit
 */
function exitIfNonExistPath(filePath, errorMessage) {
    if (!fs_1.default.existsSync(filePath)) {
        (0, console_1.consoleError)(errorMessage);
        process.exit(1);
    }
}
exports.exitIfNonExistPath = exitIfNonExistPath;
function exitIfPathExists(filePath, errorMessage) {
    if (fs_1.default.existsSync(filePath)) {
        (0, console_1.consoleError)(errorMessage);
        process.exit(1);
    }
}
exports.exitIfPathExists = exitIfPathExists;
function exitIfAnyMissingPath(paths, errorMessage) {
    var missingPaths = paths.filter(function (filePath) { return !fs_1.default.existsSync(filePath); });
    if (missingPaths.length > 0) {
        (0, console_1.consoleError)("".concat(errorMessage, ". Missing paths: ").concat(missingPaths));
        process.exit(1);
    }
}
exports.exitIfAnyMissingPath = exitIfAnyMissingPath;
/**
 * Invoking a global command with child_process.spawnSync
 */
function executeCmd(cmd, params, options) {
    var paramsStr = params ? params.join(' ') : '';
    var optionsStr = options ? JSON.stringify(options) : '';
    logging_1.logger.debug("Invoking spawnSync: ".concat(cmd, " ").concat(paramsStr, " ").concat(optionsStr));
    var _a = (0, child_process_1.spawnSync)(cmd, params, options), status = _a.status, error = _a.error, stderr = _a.stderr, stdout = _a.stdout;
    if (status !== 0 || error !== undefined) {
        return {
            state: 'error',
            error: {
                status: status,
                error: error,
                stderr: String(stderr),
                stdout: String(stdout),
            },
        };
    }
    return {
        state: 'success',
        data: String(stdout),
    };
}
exports.executeCmd = executeCmd;
function isSuccessResult(result) {
    return result.state === 'success';
}
exports.isSuccessResult = isSuccessResult;
function isErrorResult(result) {
    return result.state === 'error';
}
exports.isErrorResult = isErrorResult;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbWFuZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jbGkvdGFjby1jb21tYW5kcy91dGlscy9jb21tYW5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLCtDQUEyRDtBQUMzRCwwQ0FBbUI7QUFDbkIsOENBQXVCO0FBRXZCLHFDQUF3QztBQUN4QyxxQ0FBa0M7QUFRbEM7Ozs7O0dBS0c7QUFDSCxTQUFnQixXQUFXLENBQUMsUUFBZ0I7SUFDMUMsSUFBSSxjQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxFQUFFO1FBQzdCLE9BQU8sUUFBUSxDQUFBO0tBQ2hCO0lBRUQsT0FBTyxjQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFBRSxRQUFRLENBQUMsQ0FBQTtBQUM5QyxDQUFDO0FBTkQsa0NBTUM7QUFFRDs7Ozs7OztHQU9HO0FBQ0gsU0FBZ0Isa0JBQWtCLENBQUMsUUFBZ0IsRUFBRSxZQUFvQjtJQUN2RSxJQUFJLENBQUMsWUFBRSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsRUFBRTtRQUM1QixJQUFBLHNCQUFZLEVBQUMsWUFBWSxDQUFDLENBQUE7UUFDMUIsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUNoQjtBQUNILENBQUM7QUFMRCxnREFLQztBQUVELFNBQWdCLGdCQUFnQixDQUFDLFFBQWdCLEVBQUUsWUFBb0I7SUFDckUsSUFBSSxZQUFFLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxFQUFFO1FBQzNCLElBQUEsc0JBQVksRUFBQyxZQUFZLENBQUMsQ0FBQTtRQUMxQixPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQ2hCO0FBQ0gsQ0FBQztBQUxELDRDQUtDO0FBRUQsU0FBZ0Isb0JBQW9CLENBQUMsS0FBZSxFQUFFLFlBQW9CO0lBQ3hFLElBQU0sWUFBWSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsVUFBQyxRQUFRLElBQUssT0FBQSxDQUFDLFlBQUUsQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLEVBQXhCLENBQXdCLENBQUMsQ0FBQTtJQUN6RSxJQUFJLFlBQVksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1FBQzNCLElBQUEsc0JBQVksRUFBQyxVQUFHLFlBQVksOEJBQW9CLFlBQVksQ0FBRSxDQUFDLENBQUE7UUFDL0QsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUNoQjtBQUNILENBQUM7QUFORCxvREFNQztBQVNEOztHQUVHO0FBQ0gsU0FBZ0IsVUFBVSxDQUN4QixHQUFXLEVBQ1gsTUFBMEIsRUFDMUIsT0FBMEI7SUFFMUIsSUFBTSxTQUFTLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUE7SUFDaEQsSUFBTSxVQUFVLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUE7SUFDekQsZ0JBQU0sQ0FBQyxLQUFLLENBQUMsOEJBQXVCLEdBQUcsY0FBSSxTQUFTLGNBQUksVUFBVSxDQUFFLENBQUMsQ0FBQTtJQUUvRCxJQUFBLEtBQW9DLElBQUEseUJBQVMsRUFBQyxHQUFHLEVBQUUsTUFBTSxFQUFFLE9BQU8sQ0FBQyxFQUFqRSxNQUFNLFlBQUEsRUFBRSxLQUFLLFdBQUEsRUFBRSxNQUFNLFlBQUEsRUFBRSxNQUFNLFlBQW9DLENBQUE7SUFFekUsSUFBSSxNQUFNLEtBQUssQ0FBQyxJQUFJLEtBQUssS0FBSyxTQUFTLEVBQUU7UUFDdkMsT0FBTztZQUNMLEtBQUssRUFBRSxPQUFPO1lBQ2QsS0FBSyxFQUFFO2dCQUNMLE1BQU0sUUFBQTtnQkFDTixLQUFLLE9BQUE7Z0JBQ0wsTUFBTSxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUM7Z0JBQ3RCLE1BQU0sRUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDO2FBQ3ZCO1NBQ0YsQ0FBQTtLQUNGO0lBRUQsT0FBTztRQUNMLEtBQUssRUFBRSxTQUFTO1FBQ2hCLElBQUksRUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDO0tBQ3JCLENBQUE7QUFDSCxDQUFDO0FBM0JELGdDQTJCQztBQWNELFNBQWdCLGVBQWUsQ0FBSSxNQUEwQjtJQUMzRCxPQUFPLE1BQU0sQ0FBQyxLQUFLLEtBQUssU0FBUyxDQUFBO0FBQ25DLENBQUM7QUFGRCwwQ0FFQztBQUVELFNBQWdCLGFBQWEsQ0FBSSxNQUEwQjtJQUN6RCxPQUFPLE1BQU0sQ0FBQyxLQUFLLEtBQUssT0FBTyxDQUFBO0FBQ2pDLENBQUM7QUFGRCxzQ0FFQyJ9