"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UnitsFormat = exports.NumberFormat = exports.GeographicRole = exports.ColumnType = exports.ColumnRole = exports.AggType = exports.DataType = void 0;
/**
 * The data type for a table column.
 */
var DataType;
(function (DataType) {
    DataType["Bool"] = "bool";
    DataType["Date"] = "date";
    DataType["Datetime"] = "datetime";
    DataType["Float"] = "float";
    DataType["Int"] = "int";
    DataType["String"] = "string";
    DataType["Geometry"] = "geometry";
    DataType["Unknown"] = "unknown";
})(DataType = exports.DataType || (exports.DataType = {}));
/**
 * The aggregation type for a table column. It can be assigned as metadata
 * for columns of the int and float dataType.
 * */
var AggType;
(function (AggType) {
    AggType["Avg"] = "avg";
    AggType["Count"] = "count";
    AggType["CountDist"] = "count_dist";
    AggType["Median"] = "median";
    AggType["Sum"] = "sum";
})(AggType = exports.AggType || (exports.AggType = {}));
/**
 * The role for a table column.
 */
var ColumnRole;
(function (ColumnRole) {
    ColumnRole["Dimension"] = "dimension";
    ColumnRole["Measure"] = "measure";
})(ColumnRole = exports.ColumnRole || (exports.ColumnRole = {}));
/**
 * The type for a table column.
 */
var ColumnType;
(function (ColumnType) {
    ColumnType["Continuous"] = "continuous";
    ColumnType["Discrete"] = "discrete";
})(ColumnType = exports.ColumnType || (exports.ColumnType = {}));
/**
 * The geographic role for a table column.
 */
var GeographicRole;
(function (GeographicRole) {
    GeographicRole["AreaCode"] = "area_code";
    /** core-based statistical area / metropolitan statistical area */
    GeographicRole["CbsaMsa"] = "cbsa_msa";
    GeographicRole["City"] = "city";
    GeographicRole["CongressionalDistrict"] = "congressional_district";
    GeographicRole["CountryRegion"] = "country_region";
    GeographicRole["County"] = "county";
    GeographicRole["StateProvince"] = "state_province";
    GeographicRole["ZipCodePostcode"] = "zip_code_postcode";
    GeographicRole["Latitude"] = "latitude";
    GeographicRole["Longitude"] = "longitude";
})(GeographicRole = exports.GeographicRole || (exports.GeographicRole = {}));
/**
 * The number format for a table column. It can be assigned as metadata
 * for columns of the int and float dataType.
 * */
var NumberFormat;
(function (NumberFormat) {
    NumberFormat["Number"] = "number";
    NumberFormat["Currency"] = "currency";
    NumberFormat["Scientific"] = "scientific";
    NumberFormat["Percentage"] = "percentage";
})(NumberFormat = exports.NumberFormat || (exports.NumberFormat = {}));
/**
 * The unit format for a table column. It can be assigned as metadata
 * for columns of the int and float dataType.
 * */
var UnitsFormat;
(function (UnitsFormat) {
    UnitsFormat["Thousands"] = "thousands";
    UnitsFormat["Millions"] = "millions";
    UnitsFormat["BillionsEnglish"] = "billions_english";
    UnitsFormat["BillionsStandard"] = "billions_standard";
})(UnitsFormat = exports.UnitsFormat || (exports.UnitsFormat = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sdW1uLWhlYWRlci1wcm9wZXJ0eS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zaGFyZWQvZW51bXMvY29sdW1uLWhlYWRlci1wcm9wZXJ0eS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQTs7R0FFRztBQUNILElBQVksUUFTWDtBQVRELFdBQVksUUFBUTtJQUNsQix5QkFBYSxDQUFBO0lBQ2IseUJBQWEsQ0FBQTtJQUNiLGlDQUFxQixDQUFBO0lBQ3JCLDJCQUFlLENBQUE7SUFDZix1QkFBVyxDQUFBO0lBQ1gsNkJBQWlCLENBQUE7SUFDakIsaUNBQXFCLENBQUE7SUFDckIsK0JBQW1CLENBQUE7QUFDckIsQ0FBQyxFQVRXLFFBQVEsR0FBUixnQkFBUSxLQUFSLGdCQUFRLFFBU25CO0FBRUQ7OztLQUdLO0FBQ0wsSUFBWSxPQU1YO0FBTkQsV0FBWSxPQUFPO0lBQ2pCLHNCQUFXLENBQUE7SUFDWCwwQkFBZSxDQUFBO0lBQ2YsbUNBQXdCLENBQUE7SUFDeEIsNEJBQWlCLENBQUE7SUFDakIsc0JBQVcsQ0FBQTtBQUNiLENBQUMsRUFOVyxPQUFPLEdBQVAsZUFBTyxLQUFQLGVBQU8sUUFNbEI7QUFFRDs7R0FFRztBQUNILElBQVksVUFHWDtBQUhELFdBQVksVUFBVTtJQUNwQixxQ0FBdUIsQ0FBQTtJQUN2QixpQ0FBbUIsQ0FBQTtBQUNyQixDQUFDLEVBSFcsVUFBVSxHQUFWLGtCQUFVLEtBQVYsa0JBQVUsUUFHckI7QUFFRDs7R0FFRztBQUNILElBQVksVUFHWDtBQUhELFdBQVksVUFBVTtJQUNwQix1Q0FBeUIsQ0FBQTtJQUN6QixtQ0FBcUIsQ0FBQTtBQUN2QixDQUFDLEVBSFcsVUFBVSxHQUFWLGtCQUFVLEtBQVYsa0JBQVUsUUFHckI7QUFFRDs7R0FFRztBQUNILElBQVksY0FZWDtBQVpELFdBQVksY0FBYztJQUN4Qix3Q0FBc0IsQ0FBQTtJQUN0QixrRUFBa0U7SUFDbEUsc0NBQW9CLENBQUE7SUFDcEIsK0JBQWEsQ0FBQTtJQUNiLGtFQUFnRCxDQUFBO0lBQ2hELGtEQUFnQyxDQUFBO0lBQ2hDLG1DQUFpQixDQUFBO0lBQ2pCLGtEQUFnQyxDQUFBO0lBQ2hDLHVEQUFxQyxDQUFBO0lBQ3JDLHVDQUFxQixDQUFBO0lBQ3JCLHlDQUF1QixDQUFBO0FBQ3pCLENBQUMsRUFaVyxjQUFjLEdBQWQsc0JBQWMsS0FBZCxzQkFBYyxRQVl6QjtBQUVEOzs7S0FHSztBQUNMLElBQVksWUFLWDtBQUxELFdBQVksWUFBWTtJQUN0QixpQ0FBaUIsQ0FBQTtJQUNqQixxQ0FBcUIsQ0FBQTtJQUNyQix5Q0FBeUIsQ0FBQTtJQUN6Qix5Q0FBeUIsQ0FBQTtBQUMzQixDQUFDLEVBTFcsWUFBWSxHQUFaLG9CQUFZLEtBQVosb0JBQVksUUFLdkI7QUFFRDs7O0tBR0s7QUFDTCxJQUFZLFdBS1g7QUFMRCxXQUFZLFdBQVc7SUFDckIsc0NBQXVCLENBQUE7SUFDdkIsb0NBQXFCLENBQUE7SUFDckIsbURBQW9DLENBQUE7SUFDcEMscURBQXNDLENBQUE7QUFDeEMsQ0FBQyxFQUxXLFdBQVcsR0FBWCxtQkFBVyxLQUFYLG1CQUFXLFFBS3RCIn0=